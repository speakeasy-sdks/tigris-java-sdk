/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tigrisdata.tigris_core.models.errors.SDKError;
import com.tigrisdata.tigris_core.models.operations.SDKMethodInterfaces.*;
import com.tigrisdata.tigris_core.utils.HTTPClient;
import com.tigrisdata.tigris_core.utils.HTTPRequest;
import com.tigrisdata.tigris_core.utils.JSON;
import com.tigrisdata.tigris_core.utils.SerializedBody;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * The Collections section provide APIs that can be used to manage collections. A collection can have one or more documents.
 */
public class Collection implements
            MethodCallTigrisCreateOrUpdateCollection,
            MethodCallTigrisDelete,
            MethodCallTigrisDescribeCollection,
            MethodCallTigrisDropCollection,
            MethodCallTigrisImport,
            MethodCallTigrisInsert,
            MethodCallTigrisRead,
            MethodCallTigrisReplace,
            MethodCallTigrisSearch,
            MethodCallTigrisUpdate {

    private final SDKConfiguration sdkConfiguration;

    Collection(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.tigrisdata.tigris_core.models.operations.TigrisCreateOrUpdateCollectionRequestBuilder create() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisCreateOrUpdateCollectionRequestBuilder(this);
    }

    /**
     * Create or update a collection
     * Creates a new collection or atomically upgrades the collection to the new schema provided in the request.
     *  Schema changes are applied atomically and immediately without any downtime.
     *  Tigris Offers two types of collections: &lt;p&gt;&lt;/p&gt;
     *     &lt;li&gt; `DOCUMENTS`: Offers rich CRUD APIs.
     *     &lt;li&gt; `MESSAGES`: Offers event streaming APIs.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisCreateOrUpdateCollectionResponse create(
            com.tigrisdata.tigris_core.models.operations.TigrisCreateOrUpdateCollectionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisCreateOrUpdateCollectionRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/createOrUpdate",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisCreateOrUpdateCollectionRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "createOrUpdateCollectionRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisCreateOrUpdateCollectionResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisCreateOrUpdateCollectionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisCreateOrUpdateCollectionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.CreateOrUpdateCollectionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.CreateOrUpdateCollectionResponse>() {});
                res.withCreateOrUpdateCollectionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisDeleteRequestBuilder deleteDocuments() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisDeleteRequestBuilder(this);
    }

    /**
     * Delete Documents
     * Delete a range of documents in the collection using the condition provided in the filter.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisDeleteResponse deleteDocuments(
            com.tigrisdata.tigris_core.models.operations.TigrisDeleteRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisDeleteRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/documents/delete",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisDeleteRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "deleteRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisDeleteResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisDeleteResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisDeleteResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.DeleteResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.DeleteResponse>() {});
                res.withDeleteResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisDescribeCollectionRequestBuilder describe() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisDescribeCollectionRequestBuilder(this);
    }

    /**
     * Describe Collection
     * Returns the information related to the collection. This can be used to retrieve the schema or size of the collection.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisDescribeCollectionResponse describe(
            com.tigrisdata.tigris_core.models.operations.TigrisDescribeCollectionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisDescribeCollectionRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/describe",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisDescribeCollectionRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "describeCollectionRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisDescribeCollectionResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisDescribeCollectionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisDescribeCollectionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.DescribeCollectionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.DescribeCollectionResponse>() {});
                res.withDescribeCollectionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisDropCollectionRequestBuilder drop() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisDropCollectionRequestBuilder(this);
    }

    /**
     * Drop Collection
     * Drops the collection inside this project. This API deletes all of the
     *  documents inside this collection and any metadata associated with it.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisDropCollectionResponse drop(
            com.tigrisdata.tigris_core.models.operations.TigrisDropCollectionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisDropCollectionRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/drop",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisDropCollectionRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "dropCollectionRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisDropCollectionResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisDropCollectionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisDropCollectionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.DropCollectionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.DropCollectionResponse>() {});
                res.withDropCollectionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisImportRequestBuilder importDocuments() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisImportRequestBuilder(this);
    }

    /**
     * Import Documents
     * Imports documents into the collection.
     * 
     *  It automatically:
     *   * Detects the schema of the documents in the batch
     *   * Evolves the schema as soon as it's backward compatible
     *   * Creates collection with inferred schema (if requested)
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisImportResponse importDocuments(
            com.tigrisdata.tigris_core.models.operations.TigrisImportRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisImportRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/documents/import",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisImportRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "importRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisImportResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisImportResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisImportResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.ImportResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.ImportResponse>() {});
                res.withImportResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisInsertRequestBuilder insertDocuments() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisInsertRequestBuilder(this);
    }

    /**
     * Insert Documents
     * Inserts new documents in the collection and returns an AlreadyExists error if any of the documents
     *  in the request already exists. Insert provides idempotency by returning an error if the document
     *  already exists. To replace documents, use REPLACE API instead of INSERT.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisInsertResponse insertDocuments(
            com.tigrisdata.tigris_core.models.operations.TigrisInsertRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisInsertRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/documents/insert",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisInsertRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "insertRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisInsertResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisInsertResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisInsertResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.InsertResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.InsertResponse>() {});
                res.withInsertResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisReadRequestBuilder readDocuments() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisReadRequestBuilder(this);
    }

    /**
     * Read Documents
     * Reads a range of documents from the collection, or messages from a collection in case of event streaming. Tigris does not require you to
     *  index any fields and automatically index all the fields which means you can filter by any field in the document.
     *  An empty filter will trigger reading all the documents inside this collection. The API supports pagination that
     *  can be used by passing `Limit/Skip` parameters. The `skip` parameter skips the number of documents from the start and
     *  the `limit` parameter is used to specify the number of documents to read. You can find more detailed documentation
     *  of the Read API &lt;a href="https://docs.tigrisdata.com/overview/query" title="here"&gt;here&lt;/a&gt;.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisReadResponse readDocuments(
            com.tigrisdata.tigris_core.models.operations.TigrisReadRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisReadRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/documents/read",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisReadRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "readRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisReadResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisReadResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisReadResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.StreamingReadResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.StreamingReadResponse>() {});
                res.withStreamingReadResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisReplaceRequestBuilder replaceDocuments() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisReplaceRequestBuilder(this);
    }

    /**
     * Insert or Replace Documents
     * Inserts the documents or replaces the existing documents in the collections.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisReplaceResponse replaceDocuments(
            com.tigrisdata.tigris_core.models.operations.TigrisReplaceRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisReplaceRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/documents/replace",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisReplaceRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "replaceRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisReplaceResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisReplaceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisReplaceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.ReplaceResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.ReplaceResponse>() {});
                res.withReplaceResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisSearchRequestBuilder searchDocuments() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisSearchRequestBuilder(this);
    }

    /**
     * Search Documents.
     * Searches a collection for the documents matching the query, or messages in case of event streaming. A search can be
     *  a term search or a phrase search. Search API allows filtering the result set using filters as documented &lt;a href="https://docs.tigrisdata.com/overview/query#specification-1" title="here"&gt;here&lt;/a&gt;.
     *  You can also perform a faceted search by passing the fields in the facet parameter.
     *  You can find more detailed documentation of the Search API with multiple examples &lt;a href="https://docs.tigrisdata.com/overview/search" title="here"&gt;here&lt;/a&gt;.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisSearchResponse searchDocuments(
            com.tigrisdata.tigris_core.models.operations.TigrisSearchRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisSearchRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/documents/search",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisSearchRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "searchRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisSearchResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisSearchResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisSearchResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.StreamingSearchResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.StreamingSearchResponse>() {});
                res.withStreamingSearchResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisUpdateRequestBuilder updateDocuments() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisUpdateRequestBuilder(this);
    }

    /**
     * Update Documents.
     * Update a range of documents in the collection using the condition provided in the filter.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisUpdateResponse updateDocuments(
            com.tigrisdata.tigris_core.models.operations.TigrisUpdateRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisUpdateRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections/{collection}/documents/update",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisUpdateRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "updateRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisUpdateResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisUpdateResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisUpdateResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.UpdateResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.UpdateResponse>() {});
                res.withUpdateResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
