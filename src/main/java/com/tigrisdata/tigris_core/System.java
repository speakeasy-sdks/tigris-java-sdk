/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tigrisdata.tigris_core.models.errors.SDKError;
import com.tigrisdata.tigris_core.models.operations.SDKMethodInterfaces.*;
import com.tigrisdata.tigris_core.utils.HTTPClient;
import com.tigrisdata.tigris_core.utils.HTTPRequest;
import com.tigrisdata.tigris_core.utils.JSON;
import com.tigrisdata.tigris_core.utils.SerializedBody;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * The Observability section has APIs that provides full visibility into the health, metrics, and monitoring of the Server.
 */
public class System implements
            MethodCallHealthAPIHealth,
            MethodCallObservabilityGetInfo,
            MethodCallObservabilityQuotaUsage,
            MethodCallObservabilityQuotaLimits,
            MethodCallObservabilityQueryTimeSeriesMetrics {

    private final SDKConfiguration sdkConfiguration;

    System(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.tigrisdata.tigris_core.models.operations.HealthAPIHealthRequestBuilder getHealth() {
        return new com.tigrisdata.tigris_core.models.operations.HealthAPIHealthRequestBuilder(this);
    }

    /**
     * Health Check
     * This endpoint can be used to check the liveness of the server.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.HealthAPIHealthResponse getHealthDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                baseUrl,
                "/v1/health");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = this.sdkConfiguration.defaultClient;

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.HealthAPIHealthResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.HealthAPIHealthResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.HealthAPIHealthResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.HealthCheckResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.HealthCheckResponse>() {});
                res.withHealthCheckResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.ObservabilityGetInfoRequestBuilder getServerInfo() {
        return new com.tigrisdata.tigris_core.models.operations.ObservabilityGetInfoRequestBuilder(this);
    }

    /**
     * Information about the server
     * Provides the information about the server. This information includes returning the server version, etc.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.ObservabilityGetInfoResponse getServerInfoDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                baseUrl,
                "/v1/observability/info");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.ObservabilityGetInfoResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.ObservabilityGetInfoResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.ObservabilityGetInfoResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.GetInfoResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.GetInfoResponse>() {});
                res.withGetInfoResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaUsageRequestBuilder observabilityQuotaUsage() {
        return new com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaUsageRequestBuilder(this);
    }

    /**
     * Queries current namespace quota usage
     * Returns current namespace quota limits
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaUsageResponse observabilityQuotaUsage(
            com.tigrisdata.tigris_core.models.shared.QuotaUsageRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                baseUrl,
                "/v1/observability/quota/usage");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.shared.QuotaUsageRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaUsageResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaUsageResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaUsageResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.QuotaUsageResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.QuotaUsageResponse>() {});
                res.withQuotaUsageResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaLimitsRequestBuilder queryQuotaLimits() {
        return new com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaLimitsRequestBuilder(this);
    }

    /**
     * Queries current namespace quota limits
     * Returns current namespace quota limits
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaLimitsResponse queryQuotaLimits(
            com.tigrisdata.tigris_core.models.shared.QuotaLimitsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                baseUrl,
                "/v1/observability/quota/limits");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.shared.QuotaLimitsRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaLimitsResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaLimitsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.ObservabilityQuotaLimitsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.QuotaLimitsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.QuotaLimitsResponse>() {});
                res.withQuotaLimitsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.ObservabilityQueryTimeSeriesMetricsRequestBuilder queryTimeSeriesMetrics() {
        return new com.tigrisdata.tigris_core.models.operations.ObservabilityQueryTimeSeriesMetricsRequestBuilder(this);
    }

    /**
     * Queries time series metrics
     * Queries time series metrics
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.ObservabilityQueryTimeSeriesMetricsResponse queryTimeSeriesMetrics(
            com.tigrisdata.tigris_core.models.shared.QueryTimeSeriesMetricsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                baseUrl,
                "/v1/observability/metrics/timeseries/query");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.shared.QueryTimeSeriesMetricsRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.ObservabilityQueryTimeSeriesMetricsResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.ObservabilityQueryTimeSeriesMetricsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.ObservabilityQueryTimeSeriesMetricsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.QueryTimeSeriesMetricsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.QueryTimeSeriesMetricsResponse>() {});
                res.withQueryTimeSeriesMetricsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
