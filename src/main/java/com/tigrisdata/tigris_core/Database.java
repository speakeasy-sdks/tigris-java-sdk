/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tigrisdata.tigris_core.models.errors.SDKError;
import com.tigrisdata.tigris_core.models.operations.SDKMethodInterfaces.*;
import com.tigrisdata.tigris_core.utils.HTTPClient;
import com.tigrisdata.tigris_core.utils.HTTPRequest;
import com.tigrisdata.tigris_core.utils.JSON;
import com.tigrisdata.tigris_core.utils.SerializedBody;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.apache.http.NameValuePair;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * The Database section provide APIs that can be used to interact with the database. A single Database can have one or more collections. A database is created automatically for you when you create a project.
 */
public class Database implements
            MethodCallTigrisBeginTransaction,
            MethodCallTigrisCommitTransaction,
            MethodCallTigrisCreateBranch,
            MethodCallTigrisDeleteBranch,
            MethodCallTigrisDescribeDatabase,
            MethodCallTigrisListCollections,
            MethodCallTigrisRollbackTransaction,
            MethodCallTigrisListBranches {

    private final SDKConfiguration sdkConfiguration;

    Database(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.tigrisdata.tigris_core.models.operations.TigrisBeginTransactionRequestBuilder beginTransaction() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisBeginTransactionRequestBuilder(this);
    }

    /**
     * Begin a transaction
     * Starts a new transaction and returns a transactional object. All reads/writes performed
     *  within a transaction will run with serializable isolation. Tigris offers global transactions,
     *  with ACID properties and strict serializability.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisBeginTransactionResponse beginTransaction(
            com.tigrisdata.tigris_core.models.operations.TigrisBeginTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisBeginTransactionRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/transactions/begin",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisBeginTransactionRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "beginTransactionRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisBeginTransactionResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisBeginTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisBeginTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.BeginTransactionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.BeginTransactionResponse>() {});
                res.withBeginTransactionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisCommitTransactionRequestBuilder commitTransaction() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisCommitTransactionRequestBuilder(this);
    }

    /**
     * Commit a Transaction
     * Atomically commit all the changes performed in the context of the transaction. Commit provides all
     *  or nothing semantics by ensuring no partial updates are in the project due to a transaction failure.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisCommitTransactionResponse commitTransaction(
            com.tigrisdata.tigris_core.models.operations.TigrisCommitTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisCommitTransactionRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/transactions/commit",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisCommitTransactionRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "commitTransactionRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisCommitTransactionResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisCommitTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisCommitTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.CommitTransactionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.CommitTransactionResponse>() {});
                res.withCommitTransactionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisCreateBranchRequestBuilder createBranch() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisCreateBranchRequestBuilder(this);
    }

    /**
     * Create a database branch
     * Creates a new database branch, if not already existing.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisCreateBranchResponse createBranch(
            com.tigrisdata.tigris_core.models.operations.TigrisCreateBranchRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisCreateBranchRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/branches/{branch}/create",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisCreateBranchRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "createBranchRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisCreateBranchResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisCreateBranchResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisCreateBranchResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.CreateBranchResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.CreateBranchResponse>() {});
                res.withCreateBranchResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisDeleteBranchRequestBuilder deleteBranch() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisDeleteBranchRequestBuilder(this);
    }

    /**
     * Delete a database branch
     * Deletes a database branch, if exists.
     *  Throws 400 Bad Request if "main" branch is being deleted
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisDeleteBranchResponse deleteBranch(
            com.tigrisdata.tigris_core.models.operations.TigrisDeleteBranchRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisDeleteBranchRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/branches/{branch}/delete",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("DELETE");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisDeleteBranchRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "deleteBranchRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisDeleteBranchResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisDeleteBranchResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisDeleteBranchResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.DeleteBranchResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.DeleteBranchResponse>() {});
                res.withDeleteBranchResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisDescribeDatabaseRequestBuilder describe() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisDescribeDatabaseRequestBuilder(this);
    }

    /**
     * Describe database
     * This API returns information related to the project along with all the collections inside the project.
     *  This can be used to retrieve the size of the project or to retrieve schemas, branches and the size of all the collections present in this project.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisDescribeDatabaseResponse describe(
            com.tigrisdata.tigris_core.models.operations.TigrisDescribeDatabaseRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisDescribeDatabaseRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/describe",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisDescribeDatabaseRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "describeDatabaseRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisDescribeDatabaseResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisDescribeDatabaseResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisDescribeDatabaseResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.DescribeDatabaseResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.DescribeDatabaseResponse>() {});
                res.withDescribeDatabaseResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisListCollectionsRequestBuilder listCollections() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisListCollectionsRequestBuilder(this);
    }

    /**
     * List Collections
     * List all the collections present in the project passed in the request.
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisListCollectionsResponse listCollections(
            com.tigrisdata.tigris_core.models.operations.TigrisListCollectionsRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisListCollectionsRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/collections",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        java.util.List<NameValuePair> queryParams = com.tigrisdata.tigris_core.utils.Utils.getQueryParams(
                com.tigrisdata.tigris_core.models.operations.TigrisListCollectionsRequest.class, request, null);
        if (queryParams != null) {
            for (NameValuePair queryParam : queryParams) {
                req.addQueryParam(queryParam);
            }
        }

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisListCollectionsResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisListCollectionsResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisListCollectionsResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.ListCollectionsResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.ListCollectionsResponse>() {});
                res.withListCollectionsResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisRollbackTransactionRequestBuilder rollbackTransaction() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisRollbackTransactionRequestBuilder(this);
    }

    /**
     * Rollback a transaction
     * Rollback transaction discards all the changes
     *  performed in the transaction
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisRollbackTransactionResponse rollbackTransaction(
            com.tigrisdata.tigris_core.models.operations.TigrisRollbackTransactionRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisRollbackTransactionRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/transactions/rollback",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.TigrisRollbackTransactionRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "rollbackTransactionRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisRollbackTransactionResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisRollbackTransactionResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisRollbackTransactionResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.RollbackTransactionResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.RollbackTransactionResponse>() {});
                res.withRollbackTransactionResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.TigrisListBranchesRequestBuilder tigrisListBranches() {
        return new com.tigrisdata.tigris_core.models.operations.TigrisListBranchesRequestBuilder(this);
    }

    /**
     * List database branches
     * List database branches
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.TigrisListBranchesResponse tigrisListBranches(
            com.tigrisdata.tigris_core.models.operations.TigrisListBranchesRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.TigrisListBranchesRequest.class,
                baseUrl,
                "/v1/projects/{project}/database/branches",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.TigrisListBranchesResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.TigrisListBranchesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.TigrisListBranchesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.ListBranchesResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.ListBranchesResponse>() {});
                res.withListBranchesResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
