/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.tigrisdata.tigris_core.models.errors.SDKError;
import com.tigrisdata.tigris_core.models.operations.SDKMethodInterfaces.*;
import com.tigrisdata.tigris_core.utils.HTTPClient;
import com.tigrisdata.tigris_core.utils.HTTPRequest;
import com.tigrisdata.tigris_core.utils.JSON;
import com.tigrisdata.tigris_core.utils.SerializedBody;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.nio.charset.StandardCharsets;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * The Management section provide APIs that can be used to manage users, and app_keys.
 */
public class Namespace implements
            MethodCallCreateNamespace,
            MethodCallManagementDescribeNamespaces,
            MethodCallManagementGetNamespaceMetadata,
            MethodCallManagementInsertNamespaceMetadata,
            MethodCallManagementListNamespaces,
            MethodCallManagementUpdateNamespaceMetadata {

    private final SDKConfiguration sdkConfiguration;

    Namespace(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    public com.tigrisdata.tigris_core.models.operations.CreateNamespaceRequestBuilder create() {
        return new com.tigrisdata.tigris_core.models.operations.CreateNamespaceRequestBuilder(this);
    }

    /**
     * Creates a Namespace
     * Creates a new namespace, if it does not exist
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.CreateNamespaceResponse create(
            com.tigrisdata.tigris_core.models.shared.CreateNamespaceRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                baseUrl,
                "/v1/management/namespaces/create");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.shared.CreateNamespaceRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "request", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.CreateNamespaceResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.CreateNamespaceResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.CreateNamespaceResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.CreateNamespaceResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.CreateNamespaceResponse>() {});
                res.withCreateNamespaceResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.ManagementDescribeNamespacesRequestBuilder get() {
        return new com.tigrisdata.tigris_core.models.operations.ManagementDescribeNamespacesRequestBuilder(this);
    }

    /**
     * Describe the details of all namespaces
     * Get details for all namespaces
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.ManagementDescribeNamespacesResponse getDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                baseUrl,
                "/v1/management/namespaces/describe");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.ManagementDescribeNamespacesResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.ManagementDescribeNamespacesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.ManagementDescribeNamespacesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.DescribeNamespacesResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.DescribeNamespacesResponse>() {});
                res.withDescribeNamespacesResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.ManagementGetNamespaceMetadataRequestBuilder getMetadata() {
        return new com.tigrisdata.tigris_core.models.operations.ManagementGetNamespaceMetadataRequestBuilder(this);
    }

    /**
     * Reads the Namespace Metadata
     * GetNamespaceMetadata inserts the user metadata object
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.ManagementGetNamespaceMetadataResponse getMetadata(
            com.tigrisdata.tigris_core.models.operations.ManagementGetNamespaceMetadataRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.ManagementGetNamespaceMetadataRequest.class,
                baseUrl,
                "/v1/management/namespace/metadata/{metadataKey}/get",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.ManagementGetNamespaceMetadataRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "getNamespaceMetadataRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.ManagementGetNamespaceMetadataResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.ManagementGetNamespaceMetadataResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.ManagementGetNamespaceMetadataResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.GetNamespaceMetadataResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.GetNamespaceMetadataResponse>() {});
                res.withGetNamespaceMetadataResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.ManagementInsertNamespaceMetadataRequestBuilder insertMetadata() {
        return new com.tigrisdata.tigris_core.models.operations.ManagementInsertNamespaceMetadataRequestBuilder(this);
    }

    /**
     * Inserts Namespace Metadata
     * InsertNamespaceMetadata inserts the namespace metadata object
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.ManagementInsertNamespaceMetadataResponse insertMetadata(
            com.tigrisdata.tigris_core.models.operations.ManagementInsertNamespaceMetadataRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.ManagementInsertNamespaceMetadataRequest.class,
                baseUrl,
                "/v1/management/namespace/metadata/{metadataKey}/insert",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.ManagementInsertNamespaceMetadataRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "insertNamespaceMetadataRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.ManagementInsertNamespaceMetadataResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.ManagementInsertNamespaceMetadataResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.ManagementInsertNamespaceMetadataResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.InsertNamespaceMetadataResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.InsertNamespaceMetadataResponse>() {});
                res.withInsertNamespaceMetadataResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.ManagementListNamespacesRequestBuilder list() {
        return new com.tigrisdata.tigris_core.models.operations.ManagementListNamespacesRequestBuilder(this);
    }

    /**
     * Lists all Namespaces
     * List all namespace
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.ManagementListNamespacesResponse listDirect() throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                baseUrl,
                "/v1/management/namespaces/list");

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.ManagementListNamespacesResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.ManagementListNamespacesResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.ManagementListNamespacesResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.ListNamespacesResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.ListNamespacesResponse>() {});
                res.withListNamespacesResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }


    public com.tigrisdata.tigris_core.models.operations.ManagementUpdateNamespaceMetadataRequestBuilder updateMetadata() {
        return new com.tigrisdata.tigris_core.models.operations.ManagementUpdateNamespaceMetadataRequestBuilder(this);
    }

    /**
     * Updates Namespace Metadata
     * UpdateNamespaceMetadata updates the user metadata object
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call.
     * @throws Exception if the API call fails.
     */
    public com.tigrisdata.tigris_core.models.operations.ManagementUpdateNamespaceMetadataResponse updateMetadata(
            com.tigrisdata.tigris_core.models.operations.ManagementUpdateNamespaceMetadataRequest request) throws Exception {

        String baseUrl = this.sdkConfiguration.serverUrl;

        String url = com.tigrisdata.tigris_core.utils.Utils.generateURL(
                com.tigrisdata.tigris_core.models.operations.ManagementUpdateNamespaceMetadataRequest.class,
                baseUrl,
                "/v1/management/namespace/metadata/{metadataKey}/update",
                request, null);

        HTTPRequest req = new HTTPRequest();
        req.setMethod("POST");
        req.setURL(url);
        Object _convertedRequest = Utils.convertToShape(request, Utils.JsonShape.DEFAULT,
            new TypeReference<com.tigrisdata.tigris_core.models.operations.ManagementUpdateNamespaceMetadataRequest>() {});
        SerializedBody serializedRequestBody = com.tigrisdata.tigris_core.utils.Utils.serializeRequestBody(
                _convertedRequest, "updateNamespaceMetadataRequest", "json", false);
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "application/json");
        req.addHeader("user-agent", this.sdkConfiguration.userAgent);

        HTTPClient client = com.tigrisdata.tigris_core.utils.Utils.configureSecurityClient(
                this.sdkConfiguration.defaultClient, this.sdkConfiguration.securitySource.getSecurity());

        HttpResponse<InputStream> httpRes = client.send(req);

        String contentType = httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        com.tigrisdata.tigris_core.models.operations.ManagementUpdateNamespaceMetadataResponse.Builder resBuilder = 
            com.tigrisdata.tigris_core.models.operations.ManagementUpdateNamespaceMetadataResponse
                .builder()
                .contentType(contentType)
                .statusCode(httpRes.statusCode())
                .rawResponse(httpRes);

        com.tigrisdata.tigris_core.models.operations.ManagementUpdateNamespaceMetadataResponse res = resBuilder.build();

        res.withRawResponse(httpRes);

        if (httpRes.statusCode() == 200) {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.UpdateNamespaceMetadataResponse out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.UpdateNamespaceMetadataResponse>() {});
                res.withUpdateNamespaceMetadataResponse(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }else {
            if (com.tigrisdata.tigris_core.utils.Utils.matchContentType(contentType, "application/json")) {
                ObjectMapper mapper = JSON.getMapper();
                com.tigrisdata.tigris_core.models.shared.Status out = mapper.readValue(
                    Utils.toUtf8AndClose(httpRes.body()),
                    new TypeReference<com.tigrisdata.tigris_core.models.shared.Status>() {});
                res.withStatus(java.util.Optional.ofNullable(out));
            } else {
                throw new SDKError(httpRes, httpRes.statusCode(), "Unknown content-type received: " + contentType, Utils.toByteArrayAndClose(httpRes.body()));
            }
        }

        return res;
    }

}
