/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DescribeNamespacesData {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("details")
    private Optional<? extends String> details;

    public DescribeNamespacesData(
            @JsonProperty("details") Optional<? extends String> details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
    }

    public Optional<? extends String> details() {
        return details;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DescribeNamespacesData withDetails(String details) {
        Utils.checkNotNull(details, "details");
        this.details = Optional.ofNullable(details);
        return this;
    }

    public DescribeNamespacesData withDetails(Optional<? extends String> details) {
        Utils.checkNotNull(details, "details");
        this.details = details;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DescribeNamespacesData other = (DescribeNamespacesData) o;
        return 
            java.util.Objects.deepEquals(this.details, other.details);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            details);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DescribeNamespacesData.class,
                "details", details);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> details = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder details(String details) {
            Utils.checkNotNull(details, "details");
            this.details = Optional.ofNullable(details);
            return this;
        }

        public Builder details(Optional<? extends String> details) {
            Utils.checkNotNull(details, "details");
            this.details = details;
            return this;
        }
        
        public DescribeNamespacesData build() {
            return new DescribeNamespacesData(
                details);
        }
    }
}

