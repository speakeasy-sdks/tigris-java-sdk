/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * FacetStats - Additional stats for faceted field
 */

public class FacetStats {

    /**
     * Average of all values in a field. Only available for numeric fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("avg")
    private Optional<? extends Double> avg;

    /**
     * Total number of values in a field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<? extends Long> count;

    /**
     * Maximum of all values in a field. Only available for numeric fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max")
    private Optional<? extends Double> max;

    /**
     * Minimum of all values in a field. Only available for numeric fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("min")
    private Optional<? extends Double> min;

    /**
     * Sum of all values in a field. Only available for numeric fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sum")
    private Optional<? extends Double> sum;

    public FacetStats(
            @JsonProperty("avg") Optional<? extends Double> avg,
            @JsonProperty("count") Optional<? extends Long> count,
            @JsonProperty("max") Optional<? extends Double> max,
            @JsonProperty("min") Optional<? extends Double> min,
            @JsonProperty("sum") Optional<? extends Double> sum) {
        Utils.checkNotNull(avg, "avg");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(max, "max");
        Utils.checkNotNull(min, "min");
        Utils.checkNotNull(sum, "sum");
        this.avg = avg;
        this.count = count;
        this.max = max;
        this.min = min;
        this.sum = sum;
    }

    /**
     * Average of all values in a field. Only available for numeric fields
     */
    public Optional<? extends Double> avg() {
        return avg;
    }

    /**
     * Total number of values in a field
     */
    public Optional<? extends Long> count() {
        return count;
    }

    /**
     * Maximum of all values in a field. Only available for numeric fields
     */
    public Optional<? extends Double> max() {
        return max;
    }

    /**
     * Minimum of all values in a field. Only available for numeric fields
     */
    public Optional<? extends Double> min() {
        return min;
    }

    /**
     * Sum of all values in a field. Only available for numeric fields
     */
    public Optional<? extends Double> sum() {
        return sum;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Average of all values in a field. Only available for numeric fields
     */
    public FacetStats withAvg(double avg) {
        Utils.checkNotNull(avg, "avg");
        this.avg = Optional.ofNullable(avg);
        return this;
    }

    /**
     * Average of all values in a field. Only available for numeric fields
     */
    public FacetStats withAvg(Optional<? extends Double> avg) {
        Utils.checkNotNull(avg, "avg");
        this.avg = avg;
        return this;
    }

    /**
     * Total number of values in a field
     */
    public FacetStats withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    /**
     * Total number of values in a field
     */
    public FacetStats withCount(Optional<? extends Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    /**
     * Maximum of all values in a field. Only available for numeric fields
     */
    public FacetStats withMax(double max) {
        Utils.checkNotNull(max, "max");
        this.max = Optional.ofNullable(max);
        return this;
    }

    /**
     * Maximum of all values in a field. Only available for numeric fields
     */
    public FacetStats withMax(Optional<? extends Double> max) {
        Utils.checkNotNull(max, "max");
        this.max = max;
        return this;
    }

    /**
     * Minimum of all values in a field. Only available for numeric fields
     */
    public FacetStats withMin(double min) {
        Utils.checkNotNull(min, "min");
        this.min = Optional.ofNullable(min);
        return this;
    }

    /**
     * Minimum of all values in a field. Only available for numeric fields
     */
    public FacetStats withMin(Optional<? extends Double> min) {
        Utils.checkNotNull(min, "min");
        this.min = min;
        return this;
    }

    /**
     * Sum of all values in a field. Only available for numeric fields
     */
    public FacetStats withSum(double sum) {
        Utils.checkNotNull(sum, "sum");
        this.sum = Optional.ofNullable(sum);
        return this;
    }

    /**
     * Sum of all values in a field. Only available for numeric fields
     */
    public FacetStats withSum(Optional<? extends Double> sum) {
        Utils.checkNotNull(sum, "sum");
        this.sum = sum;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FacetStats other = (FacetStats) o;
        return 
            java.util.Objects.deepEquals(this.avg, other.avg) &&
            java.util.Objects.deepEquals(this.count, other.count) &&
            java.util.Objects.deepEquals(this.max, other.max) &&
            java.util.Objects.deepEquals(this.min, other.min) &&
            java.util.Objects.deepEquals(this.sum, other.sum);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            avg,
            count,
            max,
            min,
            sum);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FacetStats.class,
                "avg", avg,
                "count", count,
                "max", max,
                "min", min,
                "sum", sum);
    }
    
    public final static class Builder {
 
        private Optional<? extends Double> avg = Optional.empty();
 
        private Optional<? extends Long> count = Optional.empty();
 
        private Optional<? extends Double> max = Optional.empty();
 
        private Optional<? extends Double> min = Optional.empty();
 
        private Optional<? extends Double> sum = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Average of all values in a field. Only available for numeric fields
         */
        public Builder avg(double avg) {
            Utils.checkNotNull(avg, "avg");
            this.avg = Optional.ofNullable(avg);
            return this;
        }

        /**
         * Average of all values in a field. Only available for numeric fields
         */
        public Builder avg(Optional<? extends Double> avg) {
            Utils.checkNotNull(avg, "avg");
            this.avg = avg;
            return this;
        }

        /**
         * Total number of values in a field
         */
        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        /**
         * Total number of values in a field
         */
        public Builder count(Optional<? extends Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        /**
         * Maximum of all values in a field. Only available for numeric fields
         */
        public Builder max(double max) {
            Utils.checkNotNull(max, "max");
            this.max = Optional.ofNullable(max);
            return this;
        }

        /**
         * Maximum of all values in a field. Only available for numeric fields
         */
        public Builder max(Optional<? extends Double> max) {
            Utils.checkNotNull(max, "max");
            this.max = max;
            return this;
        }

        /**
         * Minimum of all values in a field. Only available for numeric fields
         */
        public Builder min(double min) {
            Utils.checkNotNull(min, "min");
            this.min = Optional.ofNullable(min);
            return this;
        }

        /**
         * Minimum of all values in a field. Only available for numeric fields
         */
        public Builder min(Optional<? extends Double> min) {
            Utils.checkNotNull(min, "min");
            this.min = min;
            return this;
        }

        /**
         * Sum of all values in a field. Only available for numeric fields
         */
        public Builder sum(double sum) {
            Utils.checkNotNull(sum, "sum");
            this.sum = Optional.ofNullable(sum);
            return this;
        }

        /**
         * Sum of all values in a field. Only available for numeric fields
         */
        public Builder sum(Optional<? extends Double> sum) {
            Utils.checkNotNull(sum, "sum");
            this.sum = sum;
            return this;
        }
        
        public FacetStats build() {
            return new FacetStats(
                avg,
                count,
                max,
                min,
                sum);
        }
    }
}

