/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GetIndexResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends IndexInfo> index;

    public GetIndexResponse(
            @JsonProperty("index") Optional<? extends IndexInfo> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
    }

    public Optional<? extends IndexInfo> index() {
        return index;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetIndexResponse withIndex(IndexInfo index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    public GetIndexResponse withIndex(Optional<? extends IndexInfo> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetIndexResponse other = (GetIndexResponse) o;
        return 
            java.util.Objects.deepEquals(this.index, other.index);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            index);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetIndexResponse.class,
                "index", index);
    }
    
    public final static class Builder {
 
        private Optional<? extends IndexInfo> index = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder index(IndexInfo index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        public Builder index(Optional<? extends IndexInfo> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }
        
        public GetIndexResponse build() {
            return new GetIndexResponse(
                index);
        }
    }
}

