/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SetRequest {

    /**
     * optional - ttl specific to this key in second
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ex")
    private Optional<? extends Long> ex;

    /**
     * set only if the key doesn't exist
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nx")
    private Optional<? extends Boolean> nx;

    /**
     * optional - ttl specific to this key in millisecond
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("px")
    private Optional<? extends Long> px;

    /**
     * free form byte[] value
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends String> value;

    /**
     * set only if the key exist
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("xx")
    private Optional<? extends Boolean> xx;

    public SetRequest(
            @JsonProperty("ex") Optional<? extends Long> ex,
            @JsonProperty("nx") Optional<? extends Boolean> nx,
            @JsonProperty("px") Optional<? extends Long> px,
            @JsonProperty("value") Optional<? extends String> value,
            @JsonProperty("xx") Optional<? extends Boolean> xx) {
        Utils.checkNotNull(ex, "ex");
        Utils.checkNotNull(nx, "nx");
        Utils.checkNotNull(px, "px");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(xx, "xx");
        this.ex = ex;
        this.nx = nx;
        this.px = px;
        this.value = value;
        this.xx = xx;
    }

    /**
     * optional - ttl specific to this key in second
     */
    public Optional<? extends Long> ex() {
        return ex;
    }

    /**
     * set only if the key doesn't exist
     */
    public Optional<? extends Boolean> nx() {
        return nx;
    }

    /**
     * optional - ttl specific to this key in millisecond
     */
    public Optional<? extends Long> px() {
        return px;
    }

    /**
     * free form byte[] value
     */
    public Optional<? extends String> value() {
        return value;
    }

    /**
     * set only if the key exist
     */
    public Optional<? extends Boolean> xx() {
        return xx;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * optional - ttl specific to this key in second
     */
    public SetRequest withEx(long ex) {
        Utils.checkNotNull(ex, "ex");
        this.ex = Optional.ofNullable(ex);
        return this;
    }

    /**
     * optional - ttl specific to this key in second
     */
    public SetRequest withEx(Optional<? extends Long> ex) {
        Utils.checkNotNull(ex, "ex");
        this.ex = ex;
        return this;
    }

    /**
     * set only if the key doesn't exist
     */
    public SetRequest withNx(boolean nx) {
        Utils.checkNotNull(nx, "nx");
        this.nx = Optional.ofNullable(nx);
        return this;
    }

    /**
     * set only if the key doesn't exist
     */
    public SetRequest withNx(Optional<? extends Boolean> nx) {
        Utils.checkNotNull(nx, "nx");
        this.nx = nx;
        return this;
    }

    /**
     * optional - ttl specific to this key in millisecond
     */
    public SetRequest withPx(long px) {
        Utils.checkNotNull(px, "px");
        this.px = Optional.ofNullable(px);
        return this;
    }

    /**
     * optional - ttl specific to this key in millisecond
     */
    public SetRequest withPx(Optional<? extends Long> px) {
        Utils.checkNotNull(px, "px");
        this.px = px;
        return this;
    }

    /**
     * free form byte[] value
     */
    public SetRequest withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    /**
     * free form byte[] value
     */
    public SetRequest withValue(Optional<? extends String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * set only if the key exist
     */
    public SetRequest withXx(boolean xx) {
        Utils.checkNotNull(xx, "xx");
        this.xx = Optional.ofNullable(xx);
        return this;
    }

    /**
     * set only if the key exist
     */
    public SetRequest withXx(Optional<? extends Boolean> xx) {
        Utils.checkNotNull(xx, "xx");
        this.xx = xx;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SetRequest other = (SetRequest) o;
        return 
            java.util.Objects.deepEquals(this.ex, other.ex) &&
            java.util.Objects.deepEquals(this.nx, other.nx) &&
            java.util.Objects.deepEquals(this.px, other.px) &&
            java.util.Objects.deepEquals(this.value, other.value) &&
            java.util.Objects.deepEquals(this.xx, other.xx);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            ex,
            nx,
            px,
            value,
            xx);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SetRequest.class,
                "ex", ex,
                "nx", nx,
                "px", px,
                "value", value,
                "xx", xx);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> ex = Optional.empty();
 
        private Optional<? extends Boolean> nx = Optional.empty();
 
        private Optional<? extends Long> px = Optional.empty();
 
        private Optional<? extends String> value = Optional.empty();
 
        private Optional<? extends Boolean> xx = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * optional - ttl specific to this key in second
         */
        public Builder ex(long ex) {
            Utils.checkNotNull(ex, "ex");
            this.ex = Optional.ofNullable(ex);
            return this;
        }

        /**
         * optional - ttl specific to this key in second
         */
        public Builder ex(Optional<? extends Long> ex) {
            Utils.checkNotNull(ex, "ex");
            this.ex = ex;
            return this;
        }

        /**
         * set only if the key doesn't exist
         */
        public Builder nx(boolean nx) {
            Utils.checkNotNull(nx, "nx");
            this.nx = Optional.ofNullable(nx);
            return this;
        }

        /**
         * set only if the key doesn't exist
         */
        public Builder nx(Optional<? extends Boolean> nx) {
            Utils.checkNotNull(nx, "nx");
            this.nx = nx;
            return this;
        }

        /**
         * optional - ttl specific to this key in millisecond
         */
        public Builder px(long px) {
            Utils.checkNotNull(px, "px");
            this.px = Optional.ofNullable(px);
            return this;
        }

        /**
         * optional - ttl specific to this key in millisecond
         */
        public Builder px(Optional<? extends Long> px) {
            Utils.checkNotNull(px, "px");
            this.px = px;
            return this;
        }

        /**
         * free form byte[] value
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * free form byte[] value
         */
        public Builder value(Optional<? extends String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * set only if the key exist
         */
        public Builder xx(boolean xx) {
            Utils.checkNotNull(xx, "xx");
            this.xx = Optional.ofNullable(xx);
            return this;
        }

        /**
         * set only if the key exist
         */
        public Builder xx(Optional<? extends Boolean> xx) {
            Utils.checkNotNull(xx, "xx");
            this.xx = xx;
            return this;
        }
        
        public SetRequest build() {
            return new SetRequest(
                ex,
                nx,
                px,
                value,
                xx);
        }
    }
}

