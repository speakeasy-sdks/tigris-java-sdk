/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SearchFacet {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("counts")
    private Optional<? extends java.util.List<FacetCount>> counts;

    /**
     * Additional stats for faceted field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stats")
    private Optional<? extends FacetStats> stats;

    public SearchFacet(
            @JsonProperty("counts") Optional<? extends java.util.List<FacetCount>> counts,
            @JsonProperty("stats") Optional<? extends FacetStats> stats) {
        Utils.checkNotNull(counts, "counts");
        Utils.checkNotNull(stats, "stats");
        this.counts = counts;
        this.stats = stats;
    }

    public Optional<? extends java.util.List<FacetCount>> counts() {
        return counts;
    }

    /**
     * Additional stats for faceted field
     */
    public Optional<? extends FacetStats> stats() {
        return stats;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public SearchFacet withCounts(java.util.List<FacetCount> counts) {
        Utils.checkNotNull(counts, "counts");
        this.counts = Optional.ofNullable(counts);
        return this;
    }

    public SearchFacet withCounts(Optional<? extends java.util.List<FacetCount>> counts) {
        Utils.checkNotNull(counts, "counts");
        this.counts = counts;
        return this;
    }

    /**
     * Additional stats for faceted field
     */
    public SearchFacet withStats(FacetStats stats) {
        Utils.checkNotNull(stats, "stats");
        this.stats = Optional.ofNullable(stats);
        return this;
    }

    /**
     * Additional stats for faceted field
     */
    public SearchFacet withStats(Optional<? extends FacetStats> stats) {
        Utils.checkNotNull(stats, "stats");
        this.stats = stats;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchFacet other = (SearchFacet) o;
        return 
            java.util.Objects.deepEquals(this.counts, other.counts) &&
            java.util.Objects.deepEquals(this.stats, other.stats);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            counts,
            stats);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchFacet.class,
                "counts", counts,
                "stats", stats);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<FacetCount>> counts = Optional.empty();
 
        private Optional<? extends FacetStats> stats = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder counts(java.util.List<FacetCount> counts) {
            Utils.checkNotNull(counts, "counts");
            this.counts = Optional.ofNullable(counts);
            return this;
        }

        public Builder counts(Optional<? extends java.util.List<FacetCount>> counts) {
            Utils.checkNotNull(counts, "counts");
            this.counts = counts;
            return this;
        }

        /**
         * Additional stats for faceted field
         */
        public Builder stats(FacetStats stats) {
            Utils.checkNotNull(stats, "stats");
            this.stats = Optional.ofNullable(stats);
            return this;
        }

        /**
         * Additional stats for faceted field
         */
        public Builder stats(Optional<? extends FacetStats> stats) {
            Utils.checkNotNull(stats, "stats");
            this.stats = stats;
            return this;
        }
        
        public SearchFacet build() {
            return new SearchFacet(
                counts,
                stats);
        }
    }
}

