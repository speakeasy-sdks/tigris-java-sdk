/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListCachesResponse {

    /**
     * List of caches metadata
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("caches")
    private Optional<? extends java.util.List<CacheMetadata>> caches;

    public ListCachesResponse(
            @JsonProperty("caches") Optional<? extends java.util.List<CacheMetadata>> caches) {
        Utils.checkNotNull(caches, "caches");
        this.caches = caches;
    }

    /**
     * List of caches metadata
     */
    public Optional<? extends java.util.List<CacheMetadata>> caches() {
        return caches;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of caches metadata
     */
    public ListCachesResponse withCaches(java.util.List<CacheMetadata> caches) {
        Utils.checkNotNull(caches, "caches");
        this.caches = Optional.ofNullable(caches);
        return this;
    }

    /**
     * List of caches metadata
     */
    public ListCachesResponse withCaches(Optional<? extends java.util.List<CacheMetadata>> caches) {
        Utils.checkNotNull(caches, "caches");
        this.caches = caches;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCachesResponse other = (ListCachesResponse) o;
        return 
            java.util.Objects.deepEquals(this.caches, other.caches);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            caches);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCachesResponse.class,
                "caches", caches);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<CacheMetadata>> caches = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of caches metadata
         */
        public Builder caches(java.util.List<CacheMetadata> caches) {
            Utils.checkNotNull(caches, "caches");
            this.caches = Optional.ofNullable(caches);
            return this;
        }

        /**
         * List of caches metadata
         */
        public Builder caches(Optional<? extends java.util.List<CacheMetadata>> caches) {
            Utils.checkNotNull(caches, "caches");
            this.caches = caches;
            return this;
        }
        
        public ListCachesResponse build() {
            return new ListCachesResponse(
                caches);
        }
    }
}

