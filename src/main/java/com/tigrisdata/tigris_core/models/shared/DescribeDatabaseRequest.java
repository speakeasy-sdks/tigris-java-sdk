/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class DescribeDatabaseRequest {

    /**
     * Optionally specify a database branch name to perform operation on
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    private Optional<? extends String> branch;

    /**
     * Project name whose db is under target to get description.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    private Optional<? extends String> project;

    /**
     * Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema_format")
    private Optional<? extends String> schemaFormat;

    public DescribeDatabaseRequest(
            @JsonProperty("branch") Optional<? extends String> branch,
            @JsonProperty("project") Optional<? extends String> project,
            @JsonProperty("schema_format") Optional<? extends String> schemaFormat) {
        Utils.checkNotNull(branch, "branch");
        Utils.checkNotNull(project, "project");
        Utils.checkNotNull(schemaFormat, "schemaFormat");
        this.branch = branch;
        this.project = project;
        this.schemaFormat = schemaFormat;
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public Optional<? extends String> branch() {
        return branch;
    }

    /**
     * Project name whose db is under target to get description.
     */
    public Optional<? extends String> project() {
        return project;
    }

    /**
     * Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
     */
    public Optional<? extends String> schemaFormat() {
        return schemaFormat;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public DescribeDatabaseRequest withBranch(String branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = Optional.ofNullable(branch);
        return this;
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public DescribeDatabaseRequest withBranch(Optional<? extends String> branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = branch;
        return this;
    }

    /**
     * Project name whose db is under target to get description.
     */
    public DescribeDatabaseRequest withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = Optional.ofNullable(project);
        return this;
    }

    /**
     * Project name whose db is under target to get description.
     */
    public DescribeDatabaseRequest withProject(Optional<? extends String> project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }

    /**
     * Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
     */
    public DescribeDatabaseRequest withSchemaFormat(String schemaFormat) {
        Utils.checkNotNull(schemaFormat, "schemaFormat");
        this.schemaFormat = Optional.ofNullable(schemaFormat);
        return this;
    }

    /**
     * Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
     */
    public DescribeDatabaseRequest withSchemaFormat(Optional<? extends String> schemaFormat) {
        Utils.checkNotNull(schemaFormat, "schemaFormat");
        this.schemaFormat = schemaFormat;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DescribeDatabaseRequest other = (DescribeDatabaseRequest) o;
        return 
            java.util.Objects.deepEquals(this.branch, other.branch) &&
            java.util.Objects.deepEquals(this.project, other.project) &&
            java.util.Objects.deepEquals(this.schemaFormat, other.schemaFormat);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            branch,
            project,
            schemaFormat);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DescribeDatabaseRequest.class,
                "branch", branch,
                "project", project,
                "schemaFormat", schemaFormat);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> branch = Optional.empty();
 
        private Optional<? extends String> project = Optional.empty();
 
        private Optional<? extends String> schemaFormat = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Optionally specify a database branch name to perform operation on
         */
        public Builder branch(String branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = Optional.ofNullable(branch);
            return this;
        }

        /**
         * Optionally specify a database branch name to perform operation on
         */
        public Builder branch(Optional<? extends String> branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = branch;
            return this;
        }

        /**
         * Project name whose db is under target to get description.
         */
        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = Optional.ofNullable(project);
            return this;
        }

        /**
         * Project name whose db is under target to get description.
         */
        public Builder project(Optional<? extends String> project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }

        /**
         * Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
         */
        public Builder schemaFormat(String schemaFormat) {
            Utils.checkNotNull(schemaFormat, "schemaFormat");
            this.schemaFormat = Optional.ofNullable(schemaFormat);
            return this;
        }

        /**
         * Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
         */
        public Builder schemaFormat(Optional<? extends String> schemaFormat) {
            Utils.checkNotNull(schemaFormat, "schemaFormat");
            this.schemaFormat = schemaFormat;
            return this;
        }
        
        public DescribeDatabaseRequest build() {
            return new DescribeDatabaseRequest(
                branch,
                project,
                schemaFormat);
        }
    }
}

