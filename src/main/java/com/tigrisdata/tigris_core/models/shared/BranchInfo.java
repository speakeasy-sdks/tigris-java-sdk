/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class BranchInfo {

    /**
     * Branch name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    private Optional<? extends String> branch;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends BranchMetadata> metadata;

    public BranchInfo(
            @JsonProperty("branch") Optional<? extends String> branch,
            @JsonProperty("metadata") Optional<? extends BranchMetadata> metadata) {
        Utils.checkNotNull(branch, "branch");
        Utils.checkNotNull(metadata, "metadata");
        this.branch = branch;
        this.metadata = metadata;
    }

    /**
     * Branch name
     */
    public Optional<? extends String> branch() {
        return branch;
    }

    public Optional<? extends BranchMetadata> metadata() {
        return metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Branch name
     */
    public BranchInfo withBranch(String branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = Optional.ofNullable(branch);
        return this;
    }

    /**
     * Branch name
     */
    public BranchInfo withBranch(Optional<? extends String> branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = branch;
        return this;
    }

    public BranchInfo withMetadata(BranchMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public BranchInfo withMetadata(Optional<? extends BranchMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BranchInfo other = (BranchInfo) o;
        return 
            java.util.Objects.deepEquals(this.branch, other.branch) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            branch,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BranchInfo.class,
                "branch", branch,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> branch = Optional.empty();
 
        private Optional<? extends BranchMetadata> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Branch name
         */
        public Builder branch(String branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = Optional.ofNullable(branch);
            return this;
        }

        /**
         * Branch name
         */
        public Builder branch(Optional<? extends String> branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = branch;
            return this;
        }

        public Builder metadata(BranchMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends BranchMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public BranchInfo build() {
            return new BranchInfo(
                branch,
                metadata);
        }
    }
}

