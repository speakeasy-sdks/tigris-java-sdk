/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateCacheRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends CreateCacheOptions> options;

    public CreateCacheRequest(
            @JsonProperty("options") Optional<? extends CreateCacheOptions> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
    }

    public Optional<? extends CreateCacheOptions> options() {
        return options;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateCacheRequest withOptions(CreateCacheOptions options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    public CreateCacheRequest withOptions(Optional<? extends CreateCacheOptions> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCacheRequest other = (CreateCacheRequest) o;
        return 
            java.util.Objects.deepEquals(this.options, other.options);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            options);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCacheRequest.class,
                "options", options);
    }
    
    public final static class Builder {
 
        private Optional<? extends CreateCacheOptions> options = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder options(CreateCacheOptions options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        public Builder options(Optional<? extends CreateCacheOptions> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }
        
        public CreateCacheRequest build() {
            return new CreateCacheRequest(
                options);
        }
    }
}

