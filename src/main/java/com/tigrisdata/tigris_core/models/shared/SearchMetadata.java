/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SearchMetadata {

    /**
     * Total number of search results across all pages
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("found")
    private Optional<? extends Long> found;

    /**
     * Pagination metadata for SearchResponse
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page")
    private Optional<? extends Page> page;

    /**
     * Number representing the total pages of results
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_pages")
    private Optional<? extends Integer> totalPages;

    public SearchMetadata(
            @JsonProperty("found") Optional<? extends Long> found,
            @JsonProperty("page") Optional<? extends Page> page,
            @JsonProperty("total_pages") Optional<? extends Integer> totalPages) {
        Utils.checkNotNull(found, "found");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(totalPages, "totalPages");
        this.found = found;
        this.page = page;
        this.totalPages = totalPages;
    }

    /**
     * Total number of search results across all pages
     */
    public Optional<? extends Long> found() {
        return found;
    }

    /**
     * Pagination metadata for SearchResponse
     */
    public Optional<? extends Page> page() {
        return page;
    }

    /**
     * Number representing the total pages of results
     */
    public Optional<? extends Integer> totalPages() {
        return totalPages;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Total number of search results across all pages
     */
    public SearchMetadata withFound(long found) {
        Utils.checkNotNull(found, "found");
        this.found = Optional.ofNullable(found);
        return this;
    }

    /**
     * Total number of search results across all pages
     */
    public SearchMetadata withFound(Optional<? extends Long> found) {
        Utils.checkNotNull(found, "found");
        this.found = found;
        return this;
    }

    /**
     * Pagination metadata for SearchResponse
     */
    public SearchMetadata withPage(Page page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Pagination metadata for SearchResponse
     */
    public SearchMetadata withPage(Optional<? extends Page> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Number representing the total pages of results
     */
    public SearchMetadata withTotalPages(int totalPages) {
        Utils.checkNotNull(totalPages, "totalPages");
        this.totalPages = Optional.ofNullable(totalPages);
        return this;
    }

    /**
     * Number representing the total pages of results
     */
    public SearchMetadata withTotalPages(Optional<? extends Integer> totalPages) {
        Utils.checkNotNull(totalPages, "totalPages");
        this.totalPages = totalPages;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchMetadata other = (SearchMetadata) o;
        return 
            java.util.Objects.deepEquals(this.found, other.found) &&
            java.util.Objects.deepEquals(this.page, other.page) &&
            java.util.Objects.deepEquals(this.totalPages, other.totalPages);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            found,
            page,
            totalPages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchMetadata.class,
                "found", found,
                "page", page,
                "totalPages", totalPages);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> found = Optional.empty();
 
        private Optional<? extends Page> page = Optional.empty();
 
        private Optional<? extends Integer> totalPages = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Total number of search results across all pages
         */
        public Builder found(long found) {
            Utils.checkNotNull(found, "found");
            this.found = Optional.ofNullable(found);
            return this;
        }

        /**
         * Total number of search results across all pages
         */
        public Builder found(Optional<? extends Long> found) {
            Utils.checkNotNull(found, "found");
            this.found = found;
            return this;
        }

        /**
         * Pagination metadata for SearchResponse
         */
        public Builder page(Page page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Pagination metadata for SearchResponse
         */
        public Builder page(Optional<? extends Page> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Number representing the total pages of results
         */
        public Builder totalPages(int totalPages) {
            Utils.checkNotNull(totalPages, "totalPages");
            this.totalPages = Optional.ofNullable(totalPages);
            return this;
        }

        /**
         * Number representing the total pages of results
         */
        public Builder totalPages(Optional<? extends Integer> totalPages) {
            Utils.checkNotNull(totalPages, "totalPages");
            this.totalPages = totalPages;
            return this;
        }
        
        public SearchMetadata build() {
            return new SearchMetadata(
                found,
                page,
                totalPages);
        }
    }
}

