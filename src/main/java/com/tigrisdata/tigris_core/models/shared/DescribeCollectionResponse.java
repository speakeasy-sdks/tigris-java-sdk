/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DescribeCollectionResponse - A detailed description of the collection. The description returns collection metadata and the schema.
 */

public class DescribeCollectionResponse {

    /**
     * Name of the collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    private Optional<? extends String> collection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends CollectionMetadata> metadata;

    /**
     * Schema of this collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    private Optional<? extends DescribeCollectionResponseSchema> schema;

    /**
     * The size of this collection in bytes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    public DescribeCollectionResponse(
            @JsonProperty("collection") Optional<? extends String> collection,
            @JsonProperty("metadata") Optional<? extends CollectionMetadata> metadata,
            @JsonProperty("schema") Optional<? extends DescribeCollectionResponseSchema> schema,
            @JsonProperty("size") Optional<? extends Long> size) {
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(schema, "schema");
        Utils.checkNotNull(size, "size");
        this.collection = collection;
        this.metadata = metadata;
        this.schema = schema;
        this.size = size;
    }

    /**
     * Name of the collection.
     */
    public Optional<? extends String> collection() {
        return collection;
    }

    public Optional<? extends CollectionMetadata> metadata() {
        return metadata;
    }

    /**
     * Schema of this collection.
     */
    public Optional<? extends DescribeCollectionResponseSchema> schema() {
        return schema;
    }

    /**
     * The size of this collection in bytes.
     */
    public Optional<? extends Long> size() {
        return size;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Name of the collection.
     */
    public DescribeCollectionResponse withCollection(String collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }

    /**
     * Name of the collection.
     */
    public DescribeCollectionResponse withCollection(Optional<? extends String> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    public DescribeCollectionResponse withMetadata(CollectionMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public DescribeCollectionResponse withMetadata(Optional<? extends CollectionMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Schema of this collection.
     */
    public DescribeCollectionResponse withSchema(DescribeCollectionResponseSchema schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = Optional.ofNullable(schema);
        return this;
    }

    /**
     * Schema of this collection.
     */
    public DescribeCollectionResponse withSchema(Optional<? extends DescribeCollectionResponseSchema> schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = schema;
        return this;
    }

    /**
     * The size of this collection in bytes.
     */
    public DescribeCollectionResponse withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * The size of this collection in bytes.
     */
    public DescribeCollectionResponse withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DescribeCollectionResponse other = (DescribeCollectionResponse) o;
        return 
            java.util.Objects.deepEquals(this.collection, other.collection) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.schema, other.schema) &&
            java.util.Objects.deepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            collection,
            metadata,
            schema,
            size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DescribeCollectionResponse.class,
                "collection", collection,
                "metadata", metadata,
                "schema", schema,
                "size", size);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> collection = Optional.empty();
 
        private Optional<? extends CollectionMetadata> metadata = Optional.empty();
 
        private Optional<? extends DescribeCollectionResponseSchema> schema = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Name of the collection.
         */
        public Builder collection(String collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        /**
         * Name of the collection.
         */
        public Builder collection(Optional<? extends String> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }

        public Builder metadata(CollectionMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends CollectionMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Schema of this collection.
         */
        public Builder schema(DescribeCollectionResponseSchema schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        /**
         * Schema of this collection.
         */
        public Builder schema(Optional<? extends DescribeCollectionResponseSchema> schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = schema;
            return this;
        }

        /**
         * The size of this collection in bytes.
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * The size of this collection in bytes.
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }
        
        public DescribeCollectionResponse build() {
            return new DescribeCollectionResponse(
                collection,
                metadata,
                schema,
                size);
        }
    }
}

