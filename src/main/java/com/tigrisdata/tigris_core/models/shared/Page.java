/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * Page - Pagination metadata for SearchResponse
 */

public class Page {

    /**
     * Number representing the current page of results
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current")
    private Optional<? extends Integer> current;

    /**
     * Maximum number of results per page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Integer> size;

    public Page(
            @JsonProperty("current") Optional<? extends Integer> current,
            @JsonProperty("size") Optional<? extends Integer> size) {
        Utils.checkNotNull(current, "current");
        Utils.checkNotNull(size, "size");
        this.current = current;
        this.size = size;
    }

    /**
     * Number representing the current page of results
     */
    public Optional<? extends Integer> current() {
        return current;
    }

    /**
     * Maximum number of results per page
     */
    public Optional<? extends Integer> size() {
        return size;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Number representing the current page of results
     */
    public Page withCurrent(int current) {
        Utils.checkNotNull(current, "current");
        this.current = Optional.ofNullable(current);
        return this;
    }

    /**
     * Number representing the current page of results
     */
    public Page withCurrent(Optional<? extends Integer> current) {
        Utils.checkNotNull(current, "current");
        this.current = current;
        return this;
    }

    /**
     * Maximum number of results per page
     */
    public Page withSize(int size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Maximum number of results per page
     */
    public Page withSize(Optional<? extends Integer> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Page other = (Page) o;
        return 
            java.util.Objects.deepEquals(this.current, other.current) &&
            java.util.Objects.deepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            current,
            size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Page.class,
                "current", current,
                "size", size);
    }
    
    public final static class Builder {
 
        private Optional<? extends Integer> current = Optional.empty();
 
        private Optional<? extends Integer> size = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number representing the current page of results
         */
        public Builder current(int current) {
            Utils.checkNotNull(current, "current");
            this.current = Optional.ofNullable(current);
            return this;
        }

        /**
         * Number representing the current page of results
         */
        public Builder current(Optional<? extends Integer> current) {
            Utils.checkNotNull(current, "current");
            this.current = current;
            return this;
        }

        /**
         * Maximum number of results per page
         */
        public Builder size(int size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Maximum number of results per page
         */
        public Builder size(Optional<? extends Integer> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }
        
        public Page build() {
            return new Page(
                current,
                size);
        }
    }
}

