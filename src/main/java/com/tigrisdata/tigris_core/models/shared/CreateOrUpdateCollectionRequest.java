/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateOrUpdateCollectionRequest {

    /**
     * Optionally specify a database branch name to perform operation on
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    private Optional<? extends String> branch;

    /**
     * If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("only_create")
    private Optional<? extends Boolean> onlyCreate;

    /**
     * Collection requests modifying options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends CollectionOptions> options;

    /**
     * The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 128    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    private Optional<? extends CreateOrUpdateCollectionRequestSchema> schema;

    public CreateOrUpdateCollectionRequest(
            @JsonProperty("branch") Optional<? extends String> branch,
            @JsonProperty("only_create") Optional<? extends Boolean> onlyCreate,
            @JsonProperty("options") Optional<? extends CollectionOptions> options,
            @JsonProperty("schema") Optional<? extends CreateOrUpdateCollectionRequestSchema> schema) {
        Utils.checkNotNull(branch, "branch");
        Utils.checkNotNull(onlyCreate, "onlyCreate");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(schema, "schema");
        this.branch = branch;
        this.onlyCreate = onlyCreate;
        this.options = options;
        this.schema = schema;
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public Optional<? extends String> branch() {
        return branch;
    }

    /**
     * If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
     */
    public Optional<? extends Boolean> onlyCreate() {
        return onlyCreate;
    }

    /**
     * Collection requests modifying options.
     */
    public Optional<? extends CollectionOptions> options() {
        return options;
    }

    /**
     * The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 128    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`
     */
    public Optional<? extends CreateOrUpdateCollectionRequestSchema> schema() {
        return schema;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public CreateOrUpdateCollectionRequest withBranch(String branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = Optional.ofNullable(branch);
        return this;
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public CreateOrUpdateCollectionRequest withBranch(Optional<? extends String> branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = branch;
        return this;
    }

    /**
     * If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
     */
    public CreateOrUpdateCollectionRequest withOnlyCreate(boolean onlyCreate) {
        Utils.checkNotNull(onlyCreate, "onlyCreate");
        this.onlyCreate = Optional.ofNullable(onlyCreate);
        return this;
    }

    /**
     * If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
     */
    public CreateOrUpdateCollectionRequest withOnlyCreate(Optional<? extends Boolean> onlyCreate) {
        Utils.checkNotNull(onlyCreate, "onlyCreate");
        this.onlyCreate = onlyCreate;
        return this;
    }

    /**
     * Collection requests modifying options.
     */
    public CreateOrUpdateCollectionRequest withOptions(CollectionOptions options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    /**
     * Collection requests modifying options.
     */
    public CreateOrUpdateCollectionRequest withOptions(Optional<? extends CollectionOptions> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    /**
     * The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 128    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`
     */
    public CreateOrUpdateCollectionRequest withSchema(CreateOrUpdateCollectionRequestSchema schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = Optional.ofNullable(schema);
        return this;
    }

    /**
     * The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 128    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`
     */
    public CreateOrUpdateCollectionRequest withSchema(Optional<? extends CreateOrUpdateCollectionRequestSchema> schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = schema;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrUpdateCollectionRequest other = (CreateOrUpdateCollectionRequest) o;
        return 
            java.util.Objects.deepEquals(this.branch, other.branch) &&
            java.util.Objects.deepEquals(this.onlyCreate, other.onlyCreate) &&
            java.util.Objects.deepEquals(this.options, other.options) &&
            java.util.Objects.deepEquals(this.schema, other.schema);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            branch,
            onlyCreate,
            options,
            schema);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrUpdateCollectionRequest.class,
                "branch", branch,
                "onlyCreate", onlyCreate,
                "options", options,
                "schema", schema);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> branch = Optional.empty();
 
        private Optional<? extends Boolean> onlyCreate = Optional.empty();
 
        private Optional<? extends CollectionOptions> options = Optional.empty();
 
        private Optional<? extends CreateOrUpdateCollectionRequestSchema> schema = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Optionally specify a database branch name to perform operation on
         */
        public Builder branch(String branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = Optional.ofNullable(branch);
            return this;
        }

        /**
         * Optionally specify a database branch name to perform operation on
         */
        public Builder branch(Optional<? extends String> branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = branch;
            return this;
        }

        /**
         * If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
         */
        public Builder onlyCreate(boolean onlyCreate) {
            Utils.checkNotNull(onlyCreate, "onlyCreate");
            this.onlyCreate = Optional.ofNullable(onlyCreate);
            return this;
        }

        /**
         * If set to `true` then the update schema request to the collection will fail by returning a conflict with HTTP Status code 409. The default is false.
         */
        public Builder onlyCreate(Optional<? extends Boolean> onlyCreate) {
            Utils.checkNotNull(onlyCreate, "onlyCreate");
            this.onlyCreate = onlyCreate;
            return this;
        }

        /**
         * Collection requests modifying options.
         */
        public Builder options(CollectionOptions options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * Collection requests modifying options.
         */
        public Builder options(Optional<? extends CollectionOptions> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        /**
         * The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 128    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`
         */
        public Builder schema(CreateOrUpdateCollectionRequestSchema schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        /**
         * The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "user",  "description": "Collection of documents with details of users",  "properties": {    "id": {      "description": "A unique identifier for the user",      "type": "integer"    },    "name": {      "description": "Name of the user",      "type": "string",      "maxLength": 128    },    "balance": {      "description": "User account balance",      "type": "number"    }  },  "primary_key": ["id"] }`
         */
        public Builder schema(Optional<? extends CreateOrUpdateCollectionRequestSchema> schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = schema;
            return this;
        }
        
        public CreateOrUpdateCollectionRequest build() {
            return new CreateOrUpdateCollectionRequest(
                branch,
                onlyCreate,
                options,
                schema);
        }
    }
}

