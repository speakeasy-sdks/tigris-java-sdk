/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListCollectionsResponse {

    /**
     * List of the collections info in the database.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections")
    private Optional<? extends java.util.List<CollectionInfo>> collections;

    public ListCollectionsResponse(
            @JsonProperty("collections") Optional<? extends java.util.List<CollectionInfo>> collections) {
        Utils.checkNotNull(collections, "collections");
        this.collections = collections;
    }

    /**
     * List of the collections info in the database.
     */
    public Optional<? extends java.util.List<CollectionInfo>> collections() {
        return collections;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of the collections info in the database.
     */
    public ListCollectionsResponse withCollections(java.util.List<CollectionInfo> collections) {
        Utils.checkNotNull(collections, "collections");
        this.collections = Optional.ofNullable(collections);
        return this;
    }

    /**
     * List of the collections info in the database.
     */
    public ListCollectionsResponse withCollections(Optional<? extends java.util.List<CollectionInfo>> collections) {
        Utils.checkNotNull(collections, "collections");
        this.collections = collections;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListCollectionsResponse other = (ListCollectionsResponse) o;
        return 
            java.util.Objects.deepEquals(this.collections, other.collections);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            collections);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListCollectionsResponse.class,
                "collections", collections);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<CollectionInfo>> collections = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of the collections info in the database.
         */
        public Builder collections(java.util.List<CollectionInfo> collections) {
            Utils.checkNotNull(collections, "collections");
            this.collections = Optional.ofNullable(collections);
            return this;
        }

        /**
         * List of the collections info in the database.
         */
        public Builder collections(Optional<? extends java.util.List<CollectionInfo>> collections) {
            Utils.checkNotNull(collections, "collections");
            this.collections = collections;
            return this;
        }
        
        public ListCollectionsResponse build() {
            return new ListCollectionsResponse(
                collections);
        }
    }
}

