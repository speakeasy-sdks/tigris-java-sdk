/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateOrReplaceDocumentRequest {

    /**
     * An array of documents to create. Each document is a JSON object. In case an id is missing then the server will automatically generate it for you and create the document and in case an id is provided in the document and the document already exists then that document will not index and in the response there will be an error corresponding to that document id other documents will succeed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")
    private Optional<? extends java.util.List<String>> documents;

    /**
     * index name where to create documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends String> index;

    /**
     * Project name whose db is under target to insert documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    private Optional<? extends String> project;

    public CreateOrReplaceDocumentRequest(
            @JsonProperty("documents") Optional<? extends java.util.List<String>> documents,
            @JsonProperty("index") Optional<? extends String> index,
            @JsonProperty("project") Optional<? extends String> project) {
        Utils.checkNotNull(documents, "documents");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(project, "project");
        this.documents = documents;
        this.index = index;
        this.project = project;
    }

    /**
     * An array of documents to create. Each document is a JSON object. In case an id is missing then the server will automatically generate it for you and create the document and in case an id is provided in the document and the document already exists then that document will not index and in the response there will be an error corresponding to that document id other documents will succeed.
     */
    public Optional<? extends java.util.List<String>> documents() {
        return documents;
    }

    /**
     * index name where to create documents.
     */
    public Optional<? extends String> index() {
        return index;
    }

    /**
     * Project name whose db is under target to insert documents.
     */
    public Optional<? extends String> project() {
        return project;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An array of documents to create. Each document is a JSON object. In case an id is missing then the server will automatically generate it for you and create the document and in case an id is provided in the document and the document already exists then that document will not index and in the response there will be an error corresponding to that document id other documents will succeed.
     */
    public CreateOrReplaceDocumentRequest withDocuments(java.util.List<String> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = Optional.ofNullable(documents);
        return this;
    }

    /**
     * An array of documents to create. Each document is a JSON object. In case an id is missing then the server will automatically generate it for you and create the document and in case an id is provided in the document and the document already exists then that document will not index and in the response there will be an error corresponding to that document id other documents will succeed.
     */
    public CreateOrReplaceDocumentRequest withDocuments(Optional<? extends java.util.List<String>> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    /**
     * index name where to create documents.
     */
    public CreateOrReplaceDocumentRequest withIndex(String index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    /**
     * index name where to create documents.
     */
    public CreateOrReplaceDocumentRequest withIndex(Optional<? extends String> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    /**
     * Project name whose db is under target to insert documents.
     */
    public CreateOrReplaceDocumentRequest withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = Optional.ofNullable(project);
        return this;
    }

    /**
     * Project name whose db is under target to insert documents.
     */
    public CreateOrReplaceDocumentRequest withProject(Optional<? extends String> project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrReplaceDocumentRequest other = (CreateOrReplaceDocumentRequest) o;
        return 
            java.util.Objects.deepEquals(this.documents, other.documents) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.project, other.project);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            documents,
            index,
            project);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrReplaceDocumentRequest.class,
                "documents", documents,
                "index", index,
                "project", project);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> documents = Optional.empty();
 
        private Optional<? extends String> index = Optional.empty();
 
        private Optional<? extends String> project = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An array of documents to create. Each document is a JSON object. In case an id is missing then the server will automatically generate it for you and create the document and in case an id is provided in the document and the document already exists then that document will not index and in the response there will be an error corresponding to that document id other documents will succeed.
         */
        public Builder documents(java.util.List<String> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = Optional.ofNullable(documents);
            return this;
        }

        /**
         * An array of documents to create. Each document is a JSON object. In case an id is missing then the server will automatically generate it for you and create the document and in case an id is provided in the document and the document already exists then that document will not index and in the response there will be an error corresponding to that document id other documents will succeed.
         */
        public Builder documents(Optional<? extends java.util.List<String>> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }

        /**
         * index name where to create documents.
         */
        public Builder index(String index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        /**
         * index name where to create documents.
         */
        public Builder index(Optional<? extends String> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        /**
         * Project name whose db is under target to insert documents.
         */
        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = Optional.ofNullable(project);
            return this;
        }

        /**
         * Project name whose db is under target to insert documents.
         */
        public Builder project(Optional<? extends String> project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }
        
        public CreateOrReplaceDocumentRequest build() {
            return new CreateOrReplaceDocumentRequest(
                documents,
                index,
                project);
        }
    }
}

