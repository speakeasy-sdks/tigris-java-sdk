/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * MetricSeries - Represents series in timeseries based on input query.
 */

public class MetricSeries {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dataPoints")
    private Optional<? extends java.util.List<DataPoint>> dataPoints;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private Optional<? extends Long> from;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metric")
    private Optional<? extends String> metric;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    private Optional<? extends String> scope;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to")
    private Optional<? extends Long> to;

    public MetricSeries(
            @JsonProperty("dataPoints") Optional<? extends java.util.List<DataPoint>> dataPoints,
            @JsonProperty("from") Optional<? extends Long> from,
            @JsonProperty("metric") Optional<? extends String> metric,
            @JsonProperty("scope") Optional<? extends String> scope,
            @JsonProperty("to") Optional<? extends Long> to) {
        Utils.checkNotNull(dataPoints, "dataPoints");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(metric, "metric");
        Utils.checkNotNull(scope, "scope");
        Utils.checkNotNull(to, "to");
        this.dataPoints = dataPoints;
        this.from = from;
        this.metric = metric;
        this.scope = scope;
        this.to = to;
    }

    public Optional<? extends java.util.List<DataPoint>> dataPoints() {
        return dataPoints;
    }

    public Optional<? extends Long> from() {
        return from;
    }

    public Optional<? extends String> metric() {
        return metric;
    }

    public Optional<? extends String> scope() {
        return scope;
    }

    public Optional<? extends Long> to() {
        return to;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MetricSeries withDataPoints(java.util.List<DataPoint> dataPoints) {
        Utils.checkNotNull(dataPoints, "dataPoints");
        this.dataPoints = Optional.ofNullable(dataPoints);
        return this;
    }

    public MetricSeries withDataPoints(Optional<? extends java.util.List<DataPoint>> dataPoints) {
        Utils.checkNotNull(dataPoints, "dataPoints");
        this.dataPoints = dataPoints;
        return this;
    }

    public MetricSeries withFrom(long from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    public MetricSeries withFrom(Optional<? extends Long> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public MetricSeries withMetric(String metric) {
        Utils.checkNotNull(metric, "metric");
        this.metric = Optional.ofNullable(metric);
        return this;
    }

    public MetricSeries withMetric(Optional<? extends String> metric) {
        Utils.checkNotNull(metric, "metric");
        this.metric = metric;
        return this;
    }

    public MetricSeries withScope(String scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = Optional.ofNullable(scope);
        return this;
    }

    public MetricSeries withScope(Optional<? extends String> scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = scope;
        return this;
    }

    public MetricSeries withTo(long to) {
        Utils.checkNotNull(to, "to");
        this.to = Optional.ofNullable(to);
        return this;
    }

    public MetricSeries withTo(Optional<? extends Long> to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetricSeries other = (MetricSeries) o;
        return 
            java.util.Objects.deepEquals(this.dataPoints, other.dataPoints) &&
            java.util.Objects.deepEquals(this.from, other.from) &&
            java.util.Objects.deepEquals(this.metric, other.metric) &&
            java.util.Objects.deepEquals(this.scope, other.scope) &&
            java.util.Objects.deepEquals(this.to, other.to);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            dataPoints,
            from,
            metric,
            scope,
            to);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MetricSeries.class,
                "dataPoints", dataPoints,
                "from", from,
                "metric", metric,
                "scope", scope,
                "to", to);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<DataPoint>> dataPoints = Optional.empty();
 
        private Optional<? extends Long> from = Optional.empty();
 
        private Optional<? extends String> metric = Optional.empty();
 
        private Optional<? extends String> scope = Optional.empty();
 
        private Optional<? extends Long> to = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dataPoints(java.util.List<DataPoint> dataPoints) {
            Utils.checkNotNull(dataPoints, "dataPoints");
            this.dataPoints = Optional.ofNullable(dataPoints);
            return this;
        }

        public Builder dataPoints(Optional<? extends java.util.List<DataPoint>> dataPoints) {
            Utils.checkNotNull(dataPoints, "dataPoints");
            this.dataPoints = dataPoints;
            return this;
        }

        public Builder from(long from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        public Builder from(Optional<? extends Long> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder metric(String metric) {
            Utils.checkNotNull(metric, "metric");
            this.metric = Optional.ofNullable(metric);
            return this;
        }

        public Builder metric(Optional<? extends String> metric) {
            Utils.checkNotNull(metric, "metric");
            this.metric = metric;
            return this;
        }

        public Builder scope(String scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = Optional.ofNullable(scope);
            return this;
        }

        public Builder scope(Optional<? extends String> scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = scope;
            return this;
        }

        public Builder to(long to) {
            Utils.checkNotNull(to, "to");
            this.to = Optional.ofNullable(to);
            return this;
        }

        public Builder to(Optional<? extends Long> to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }
        
        public MetricSeries build() {
            return new MetricSeries(
                dataPoints,
                from,
                metric,
                scope,
                to);
        }
    }
}

