/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class KeysResponse {

    /**
     * cursor - 0 is the keys scan is finished, non-zero cursor can be passed in next keys request to continue the scan this is useful if streaming breaks and user wants to resume stream
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cursor")
    private Optional<? extends Long> cursor;

    /**
     * keys
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("keys")
    private Optional<? extends java.util.List<String>> keys;

    public KeysResponse(
            @JsonProperty("cursor") Optional<? extends Long> cursor,
            @JsonProperty("keys") Optional<? extends java.util.List<String>> keys) {
        Utils.checkNotNull(cursor, "cursor");
        Utils.checkNotNull(keys, "keys");
        this.cursor = cursor;
        this.keys = keys;
    }

    /**
     * cursor - 0 is the keys scan is finished, non-zero cursor can be passed in next keys request to continue the scan this is useful if streaming breaks and user wants to resume stream
     */
    public Optional<? extends Long> cursor() {
        return cursor;
    }

    /**
     * keys
     */
    public Optional<? extends java.util.List<String>> keys() {
        return keys;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * cursor - 0 is the keys scan is finished, non-zero cursor can be passed in next keys request to continue the scan this is useful if streaming breaks and user wants to resume stream
     */
    public KeysResponse withCursor(long cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = Optional.ofNullable(cursor);
        return this;
    }

    /**
     * cursor - 0 is the keys scan is finished, non-zero cursor can be passed in next keys request to continue the scan this is useful if streaming breaks and user wants to resume stream
     */
    public KeysResponse withCursor(Optional<? extends Long> cursor) {
        Utils.checkNotNull(cursor, "cursor");
        this.cursor = cursor;
        return this;
    }

    /**
     * keys
     */
    public KeysResponse withKeys(java.util.List<String> keys) {
        Utils.checkNotNull(keys, "keys");
        this.keys = Optional.ofNullable(keys);
        return this;
    }

    /**
     * keys
     */
    public KeysResponse withKeys(Optional<? extends java.util.List<String>> keys) {
        Utils.checkNotNull(keys, "keys");
        this.keys = keys;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KeysResponse other = (KeysResponse) o;
        return 
            java.util.Objects.deepEquals(this.cursor, other.cursor) &&
            java.util.Objects.deepEquals(this.keys, other.keys);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            cursor,
            keys);
    }
    
    @Override
    public String toString() {
        return Utils.toString(KeysResponse.class,
                "cursor", cursor,
                "keys", keys);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> cursor = Optional.empty();
 
        private Optional<? extends java.util.List<String>> keys = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * cursor - 0 is the keys scan is finished, non-zero cursor can be passed in next keys request to continue the scan this is useful if streaming breaks and user wants to resume stream
         */
        public Builder cursor(long cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = Optional.ofNullable(cursor);
            return this;
        }

        /**
         * cursor - 0 is the keys scan is finished, non-zero cursor can be passed in next keys request to continue the scan this is useful if streaming breaks and user wants to resume stream
         */
        public Builder cursor(Optional<? extends Long> cursor) {
            Utils.checkNotNull(cursor, "cursor");
            this.cursor = cursor;
            return this;
        }

        /**
         * keys
         */
        public Builder keys(java.util.List<String> keys) {
            Utils.checkNotNull(keys, "keys");
            this.keys = Optional.ofNullable(keys);
            return this;
        }

        /**
         * keys
         */
        public Builder keys(Optional<? extends java.util.List<String>> keys) {
            Utils.checkNotNull(keys, "keys");
            this.keys = keys;
            return this;
        }
        
        public KeysResponse build() {
            return new KeysResponse(
                cursor,
                keys);
        }
    }
}

