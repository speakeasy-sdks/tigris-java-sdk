/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * BeginTransactionResponse - Start transaction returns transaction context  which uniquely identifies the transaction
 */

public class BeginTransactionResponse {

    /**
     * Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tx_ctx")
    private Optional<? extends TransactionCtx> txCtx;

    public BeginTransactionResponse(
            @JsonProperty("tx_ctx") Optional<? extends TransactionCtx> txCtx) {
        Utils.checkNotNull(txCtx, "txCtx");
        this.txCtx = txCtx;
    }

    /**
     * Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
     */
    public Optional<? extends TransactionCtx> txCtx() {
        return txCtx;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
     */
    public BeginTransactionResponse withTxCtx(TransactionCtx txCtx) {
        Utils.checkNotNull(txCtx, "txCtx");
        this.txCtx = Optional.ofNullable(txCtx);
        return this;
    }

    /**
     * Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
     */
    public BeginTransactionResponse withTxCtx(Optional<? extends TransactionCtx> txCtx) {
        Utils.checkNotNull(txCtx, "txCtx");
        this.txCtx = txCtx;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BeginTransactionResponse other = (BeginTransactionResponse) o;
        return 
            java.util.Objects.deepEquals(this.txCtx, other.txCtx);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            txCtx);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BeginTransactionResponse.class,
                "txCtx", txCtx);
    }
    
    public final static class Builder {
 
        private Optional<? extends TransactionCtx> txCtx = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
         */
        public Builder txCtx(TransactionCtx txCtx) {
            Utils.checkNotNull(txCtx, "txCtx");
            this.txCtx = Optional.ofNullable(txCtx);
            return this;
        }

        /**
         * Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
         */
        public Builder txCtx(Optional<? extends TransactionCtx> txCtx) {
            Utils.checkNotNull(txCtx, "txCtx");
            this.txCtx = txCtx;
            return this;
        }
        
        public BeginTransactionResponse build() {
            return new BeginTransactionResponse(
                txCtx);
        }
    }
}

