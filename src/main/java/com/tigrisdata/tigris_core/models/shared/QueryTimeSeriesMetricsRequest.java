/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * QueryTimeSeriesMetricsRequest - Requests the time series metrics
 */

public class QueryTimeSeriesMetricsRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalFunctions")
    private Optional<? extends java.util.List<AdditionalFunction>> additionalFunctions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    private Optional<? extends String> branch;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    private Optional<? extends String> collection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("db")
    private Optional<? extends String> db;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private Optional<? extends Long> from;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("function")
    private Optional<? extends Function> function;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metric_name")
    private Optional<? extends String> metricName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quantile")
    private Optional<? extends Float> quantile;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("space_aggregated_by")
    private Optional<? extends java.util.List<String>> spaceAggregatedBy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("space_aggregation")
    private Optional<? extends SpaceAggregation> spaceAggregation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tigris_operation")
    private Optional<? extends TigrisOperation> tigrisOperation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to")
    private Optional<? extends Long> to;

    public QueryTimeSeriesMetricsRequest(
            @JsonProperty("additionalFunctions") Optional<? extends java.util.List<AdditionalFunction>> additionalFunctions,
            @JsonProperty("branch") Optional<? extends String> branch,
            @JsonProperty("collection") Optional<? extends String> collection,
            @JsonProperty("db") Optional<? extends String> db,
            @JsonProperty("from") Optional<? extends Long> from,
            @JsonProperty("function") Optional<? extends Function> function,
            @JsonProperty("metric_name") Optional<? extends String> metricName,
            @JsonProperty("quantile") Optional<? extends Float> quantile,
            @JsonProperty("space_aggregated_by") Optional<? extends java.util.List<String>> spaceAggregatedBy,
            @JsonProperty("space_aggregation") Optional<? extends SpaceAggregation> spaceAggregation,
            @JsonProperty("tigris_operation") Optional<? extends TigrisOperation> tigrisOperation,
            @JsonProperty("to") Optional<? extends Long> to) {
        Utils.checkNotNull(additionalFunctions, "additionalFunctions");
        Utils.checkNotNull(branch, "branch");
        Utils.checkNotNull(collection, "collection");
        Utils.checkNotNull(db, "db");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(function, "function");
        Utils.checkNotNull(metricName, "metricName");
        Utils.checkNotNull(quantile, "quantile");
        Utils.checkNotNull(spaceAggregatedBy, "spaceAggregatedBy");
        Utils.checkNotNull(spaceAggregation, "spaceAggregation");
        Utils.checkNotNull(tigrisOperation, "tigrisOperation");
        Utils.checkNotNull(to, "to");
        this.additionalFunctions = additionalFunctions;
        this.branch = branch;
        this.collection = collection;
        this.db = db;
        this.from = from;
        this.function = function;
        this.metricName = metricName;
        this.quantile = quantile;
        this.spaceAggregatedBy = spaceAggregatedBy;
        this.spaceAggregation = spaceAggregation;
        this.tigrisOperation = tigrisOperation;
        this.to = to;
    }

    public Optional<? extends java.util.List<AdditionalFunction>> additionalFunctions() {
        return additionalFunctions;
    }

    public Optional<? extends String> branch() {
        return branch;
    }

    public Optional<? extends String> collection() {
        return collection;
    }

    public Optional<? extends String> db() {
        return db;
    }

    public Optional<? extends Long> from() {
        return from;
    }

    public Optional<? extends Function> function() {
        return function;
    }

    public Optional<? extends String> metricName() {
        return metricName;
    }

    public Optional<? extends Float> quantile() {
        return quantile;
    }

    public Optional<? extends java.util.List<String>> spaceAggregatedBy() {
        return spaceAggregatedBy;
    }

    public Optional<? extends SpaceAggregation> spaceAggregation() {
        return spaceAggregation;
    }

    public Optional<? extends TigrisOperation> tigrisOperation() {
        return tigrisOperation;
    }

    public Optional<? extends Long> to() {
        return to;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public QueryTimeSeriesMetricsRequest withAdditionalFunctions(java.util.List<AdditionalFunction> additionalFunctions) {
        Utils.checkNotNull(additionalFunctions, "additionalFunctions");
        this.additionalFunctions = Optional.ofNullable(additionalFunctions);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withAdditionalFunctions(Optional<? extends java.util.List<AdditionalFunction>> additionalFunctions) {
        Utils.checkNotNull(additionalFunctions, "additionalFunctions");
        this.additionalFunctions = additionalFunctions;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withBranch(String branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = Optional.ofNullable(branch);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withBranch(Optional<? extends String> branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = branch;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withCollection(String collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = Optional.ofNullable(collection);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withCollection(Optional<? extends String> collection) {
        Utils.checkNotNull(collection, "collection");
        this.collection = collection;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withDb(String db) {
        Utils.checkNotNull(db, "db");
        this.db = Optional.ofNullable(db);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withDb(Optional<? extends String> db) {
        Utils.checkNotNull(db, "db");
        this.db = db;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withFrom(long from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withFrom(Optional<? extends Long> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withFunction(Function function) {
        Utils.checkNotNull(function, "function");
        this.function = Optional.ofNullable(function);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withFunction(Optional<? extends Function> function) {
        Utils.checkNotNull(function, "function");
        this.function = function;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withMetricName(String metricName) {
        Utils.checkNotNull(metricName, "metricName");
        this.metricName = Optional.ofNullable(metricName);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withMetricName(Optional<? extends String> metricName) {
        Utils.checkNotNull(metricName, "metricName");
        this.metricName = metricName;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withQuantile(float quantile) {
        Utils.checkNotNull(quantile, "quantile");
        this.quantile = Optional.ofNullable(quantile);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withQuantile(Optional<? extends Float> quantile) {
        Utils.checkNotNull(quantile, "quantile");
        this.quantile = quantile;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withSpaceAggregatedBy(java.util.List<String> spaceAggregatedBy) {
        Utils.checkNotNull(spaceAggregatedBy, "spaceAggregatedBy");
        this.spaceAggregatedBy = Optional.ofNullable(spaceAggregatedBy);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withSpaceAggregatedBy(Optional<? extends java.util.List<String>> spaceAggregatedBy) {
        Utils.checkNotNull(spaceAggregatedBy, "spaceAggregatedBy");
        this.spaceAggregatedBy = spaceAggregatedBy;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withSpaceAggregation(SpaceAggregation spaceAggregation) {
        Utils.checkNotNull(spaceAggregation, "spaceAggregation");
        this.spaceAggregation = Optional.ofNullable(spaceAggregation);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withSpaceAggregation(Optional<? extends SpaceAggregation> spaceAggregation) {
        Utils.checkNotNull(spaceAggregation, "spaceAggregation");
        this.spaceAggregation = spaceAggregation;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withTigrisOperation(TigrisOperation tigrisOperation) {
        Utils.checkNotNull(tigrisOperation, "tigrisOperation");
        this.tigrisOperation = Optional.ofNullable(tigrisOperation);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withTigrisOperation(Optional<? extends TigrisOperation> tigrisOperation) {
        Utils.checkNotNull(tigrisOperation, "tigrisOperation");
        this.tigrisOperation = tigrisOperation;
        return this;
    }

    public QueryTimeSeriesMetricsRequest withTo(long to) {
        Utils.checkNotNull(to, "to");
        this.to = Optional.ofNullable(to);
        return this;
    }

    public QueryTimeSeriesMetricsRequest withTo(Optional<? extends Long> to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryTimeSeriesMetricsRequest other = (QueryTimeSeriesMetricsRequest) o;
        return 
            java.util.Objects.deepEquals(this.additionalFunctions, other.additionalFunctions) &&
            java.util.Objects.deepEquals(this.branch, other.branch) &&
            java.util.Objects.deepEquals(this.collection, other.collection) &&
            java.util.Objects.deepEquals(this.db, other.db) &&
            java.util.Objects.deepEquals(this.from, other.from) &&
            java.util.Objects.deepEquals(this.function, other.function) &&
            java.util.Objects.deepEquals(this.metricName, other.metricName) &&
            java.util.Objects.deepEquals(this.quantile, other.quantile) &&
            java.util.Objects.deepEquals(this.spaceAggregatedBy, other.spaceAggregatedBy) &&
            java.util.Objects.deepEquals(this.spaceAggregation, other.spaceAggregation) &&
            java.util.Objects.deepEquals(this.tigrisOperation, other.tigrisOperation) &&
            java.util.Objects.deepEquals(this.to, other.to);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            additionalFunctions,
            branch,
            collection,
            db,
            from,
            function,
            metricName,
            quantile,
            spaceAggregatedBy,
            spaceAggregation,
            tigrisOperation,
            to);
    }
    
    @Override
    public String toString() {
        return Utils.toString(QueryTimeSeriesMetricsRequest.class,
                "additionalFunctions", additionalFunctions,
                "branch", branch,
                "collection", collection,
                "db", db,
                "from", from,
                "function", function,
                "metricName", metricName,
                "quantile", quantile,
                "spaceAggregatedBy", spaceAggregatedBy,
                "spaceAggregation", spaceAggregation,
                "tigrisOperation", tigrisOperation,
                "to", to);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<AdditionalFunction>> additionalFunctions = Optional.empty();
 
        private Optional<? extends String> branch = Optional.empty();
 
        private Optional<? extends String> collection = Optional.empty();
 
        private Optional<? extends String> db = Optional.empty();
 
        private Optional<? extends Long> from = Optional.empty();
 
        private Optional<? extends Function> function = Optional.empty();
 
        private Optional<? extends String> metricName = Optional.empty();
 
        private Optional<? extends Float> quantile = Optional.empty();
 
        private Optional<? extends java.util.List<String>> spaceAggregatedBy = Optional.empty();
 
        private Optional<? extends SpaceAggregation> spaceAggregation = Optional.empty();
 
        private Optional<? extends TigrisOperation> tigrisOperation = Optional.empty();
 
        private Optional<? extends Long> to = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalFunctions(java.util.List<AdditionalFunction> additionalFunctions) {
            Utils.checkNotNull(additionalFunctions, "additionalFunctions");
            this.additionalFunctions = Optional.ofNullable(additionalFunctions);
            return this;
        }

        public Builder additionalFunctions(Optional<? extends java.util.List<AdditionalFunction>> additionalFunctions) {
            Utils.checkNotNull(additionalFunctions, "additionalFunctions");
            this.additionalFunctions = additionalFunctions;
            return this;
        }

        public Builder branch(String branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = Optional.ofNullable(branch);
            return this;
        }

        public Builder branch(Optional<? extends String> branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = branch;
            return this;
        }

        public Builder collection(String collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = Optional.ofNullable(collection);
            return this;
        }

        public Builder collection(Optional<? extends String> collection) {
            Utils.checkNotNull(collection, "collection");
            this.collection = collection;
            return this;
        }

        public Builder db(String db) {
            Utils.checkNotNull(db, "db");
            this.db = Optional.ofNullable(db);
            return this;
        }

        public Builder db(Optional<? extends String> db) {
            Utils.checkNotNull(db, "db");
            this.db = db;
            return this;
        }

        public Builder from(long from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        public Builder from(Optional<? extends Long> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder function(Function function) {
            Utils.checkNotNull(function, "function");
            this.function = Optional.ofNullable(function);
            return this;
        }

        public Builder function(Optional<? extends Function> function) {
            Utils.checkNotNull(function, "function");
            this.function = function;
            return this;
        }

        public Builder metricName(String metricName) {
            Utils.checkNotNull(metricName, "metricName");
            this.metricName = Optional.ofNullable(metricName);
            return this;
        }

        public Builder metricName(Optional<? extends String> metricName) {
            Utils.checkNotNull(metricName, "metricName");
            this.metricName = metricName;
            return this;
        }

        public Builder quantile(float quantile) {
            Utils.checkNotNull(quantile, "quantile");
            this.quantile = Optional.ofNullable(quantile);
            return this;
        }

        public Builder quantile(Optional<? extends Float> quantile) {
            Utils.checkNotNull(quantile, "quantile");
            this.quantile = quantile;
            return this;
        }

        public Builder spaceAggregatedBy(java.util.List<String> spaceAggregatedBy) {
            Utils.checkNotNull(spaceAggregatedBy, "spaceAggregatedBy");
            this.spaceAggregatedBy = Optional.ofNullable(spaceAggregatedBy);
            return this;
        }

        public Builder spaceAggregatedBy(Optional<? extends java.util.List<String>> spaceAggregatedBy) {
            Utils.checkNotNull(spaceAggregatedBy, "spaceAggregatedBy");
            this.spaceAggregatedBy = spaceAggregatedBy;
            return this;
        }

        public Builder spaceAggregation(SpaceAggregation spaceAggregation) {
            Utils.checkNotNull(spaceAggregation, "spaceAggregation");
            this.spaceAggregation = Optional.ofNullable(spaceAggregation);
            return this;
        }

        public Builder spaceAggregation(Optional<? extends SpaceAggregation> spaceAggregation) {
            Utils.checkNotNull(spaceAggregation, "spaceAggregation");
            this.spaceAggregation = spaceAggregation;
            return this;
        }

        public Builder tigrisOperation(TigrisOperation tigrisOperation) {
            Utils.checkNotNull(tigrisOperation, "tigrisOperation");
            this.tigrisOperation = Optional.ofNullable(tigrisOperation);
            return this;
        }

        public Builder tigrisOperation(Optional<? extends TigrisOperation> tigrisOperation) {
            Utils.checkNotNull(tigrisOperation, "tigrisOperation");
            this.tigrisOperation = tigrisOperation;
            return this;
        }

        public Builder to(long to) {
            Utils.checkNotNull(to, "to");
            this.to = Optional.ofNullable(to);
            return this;
        }

        public Builder to(Optional<? extends Long> to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }
        
        public QueryTimeSeriesMetricsRequest build() {
            return new QueryTimeSeriesMetricsRequest(
                additionalFunctions,
                branch,
                collection,
                db,
                from,
                function,
                metricName,
                quantile,
                spaceAggregatedBy,
                spaceAggregation,
                tigrisOperation,
                to);
        }
    }
}

