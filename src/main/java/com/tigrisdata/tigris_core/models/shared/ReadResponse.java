/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ReadResponse {

    /**
     * Object containing the collection document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends Data> data;

    /**
     * Has metadata related to the documents stored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends ResponseMetadata> metadata;

    /**
     * An internal key, used for pagination.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resume_token")
    private Optional<? extends String> resumeToken;

    public ReadResponse(
            @JsonProperty("data") Optional<? extends Data> data,
            @JsonProperty("metadata") Optional<? extends ResponseMetadata> metadata,
            @JsonProperty("resume_token") Optional<? extends String> resumeToken) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(resumeToken, "resumeToken");
        this.data = data;
        this.metadata = metadata;
        this.resumeToken = resumeToken;
    }

    /**
     * Object containing the collection document.
     */
    public Optional<? extends Data> data() {
        return data;
    }

    /**
     * Has metadata related to the documents stored.
     */
    public Optional<? extends ResponseMetadata> metadata() {
        return metadata;
    }

    /**
     * An internal key, used for pagination.
     */
    public Optional<? extends String> resumeToken() {
        return resumeToken;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Object containing the collection document.
     */
    public ReadResponse withData(Data data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    /**
     * Object containing the collection document.
     */
    public ReadResponse withData(Optional<? extends Data> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    /**
     * Has metadata related to the documents stored.
     */
    public ReadResponse withMetadata(ResponseMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Has metadata related to the documents stored.
     */
    public ReadResponse withMetadata(Optional<? extends ResponseMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * An internal key, used for pagination.
     */
    public ReadResponse withResumeToken(String resumeToken) {
        Utils.checkNotNull(resumeToken, "resumeToken");
        this.resumeToken = Optional.ofNullable(resumeToken);
        return this;
    }

    /**
     * An internal key, used for pagination.
     */
    public ReadResponse withResumeToken(Optional<? extends String> resumeToken) {
        Utils.checkNotNull(resumeToken, "resumeToken");
        this.resumeToken = resumeToken;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReadResponse other = (ReadResponse) o;
        return 
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.resumeToken, other.resumeToken);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            data,
            metadata,
            resumeToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReadResponse.class,
                "data", data,
                "metadata", metadata,
                "resumeToken", resumeToken);
    }
    
    public final static class Builder {
 
        private Optional<? extends Data> data = Optional.empty();
 
        private Optional<? extends ResponseMetadata> metadata = Optional.empty();
 
        private Optional<? extends String> resumeToken = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Object containing the collection document.
         */
        public Builder data(Data data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        /**
         * Object containing the collection document.
         */
        public Builder data(Optional<? extends Data> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        /**
         * Has metadata related to the documents stored.
         */
        public Builder metadata(ResponseMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Has metadata related to the documents stored.
         */
        public Builder metadata(Optional<? extends ResponseMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * An internal key, used for pagination.
         */
        public Builder resumeToken(String resumeToken) {
            Utils.checkNotNull(resumeToken, "resumeToken");
            this.resumeToken = Optional.ofNullable(resumeToken);
            return this;
        }

        /**
         * An internal key, used for pagination.
         */
        public Builder resumeToken(Optional<? extends String> resumeToken) {
            Utils.checkNotNull(resumeToken, "resumeToken");
            this.resumeToken = resumeToken;
            return this;
        }
        
        public ReadResponse build() {
            return new ReadResponse(
                data,
                metadata,
                resumeToken);
        }
    }
}

