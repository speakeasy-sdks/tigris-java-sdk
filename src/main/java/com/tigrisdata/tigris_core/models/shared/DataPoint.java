/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DataPoint - Represents the data point in timeseries.
 */

public class DataPoint {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<? extends Long> timestamp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends Double> value;

    public DataPoint(
            @JsonProperty("timestamp") Optional<? extends Long> timestamp,
            @JsonProperty("value") Optional<? extends Double> value) {
        Utils.checkNotNull(timestamp, "timestamp");
        Utils.checkNotNull(value, "value");
        this.timestamp = timestamp;
        this.value = value;
    }

    public Optional<? extends Long> timestamp() {
        return timestamp;
    }

    public Optional<? extends Double> value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public DataPoint withTimestamp(long timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    public DataPoint withTimestamp(Optional<? extends Long> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }

    public DataPoint withValue(double value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public DataPoint withValue(Optional<? extends Double> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DataPoint other = (DataPoint) o;
        return 
            java.util.Objects.deepEquals(this.timestamp, other.timestamp) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            timestamp,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DataPoint.class,
                "timestamp", timestamp,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> timestamp = Optional.empty();
 
        private Optional<? extends Double> value = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder timestamp(long timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        public Builder timestamp(Optional<? extends Long> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }

        public Builder value(double value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<? extends Double> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public DataPoint build() {
            return new DataPoint(
                timestamp,
                value);
        }
    }
}

