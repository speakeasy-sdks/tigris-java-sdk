/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * TransactionCtx - Contains ID which uniquely identifies transaction This context is returned by BeginTransaction request and should be passed in the metadata (headers) of subsequent requests in order to run them in the context of the same transaction.
 */

public class TransactionCtx {

    /**
     * Unique for a single transactional request.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * Serves as an internal identifier.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origin")
    private Optional<? extends String> origin;

    public TransactionCtx(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("origin") Optional<? extends String> origin) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(origin, "origin");
        this.id = id;
        this.origin = origin;
    }

    /**
     * Unique for a single transactional request.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * Serves as an internal identifier.
     */
    public Optional<? extends String> origin() {
        return origin;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique for a single transactional request.
     */
    public TransactionCtx withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Unique for a single transactional request.
     */
    public TransactionCtx withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Serves as an internal identifier.
     */
    public TransactionCtx withOrigin(String origin) {
        Utils.checkNotNull(origin, "origin");
        this.origin = Optional.ofNullable(origin);
        return this;
    }

    /**
     * Serves as an internal identifier.
     */
    public TransactionCtx withOrigin(Optional<? extends String> origin) {
        Utils.checkNotNull(origin, "origin");
        this.origin = origin;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TransactionCtx other = (TransactionCtx) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.origin, other.origin);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            origin);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TransactionCtx.class,
                "id", id,
                "origin", origin);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> origin = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique for a single transactional request.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Unique for a single transactional request.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Serves as an internal identifier.
         */
        public Builder origin(String origin) {
            Utils.checkNotNull(origin, "origin");
            this.origin = Optional.ofNullable(origin);
            return this;
        }

        /**
         * Serves as an internal identifier.
         */
        public Builder origin(Optional<? extends String> origin) {
            Utils.checkNotNull(origin, "origin");
            this.origin = origin;
            return this;
        }
        
        public TransactionCtx build() {
            return new TransactionCtx(
                id,
                origin);
        }
    }
}

