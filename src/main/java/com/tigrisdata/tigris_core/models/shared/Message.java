/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class Message {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data")
    private Optional<? extends String> data;

    /**
     * an optional id if idempotency is needed to ensure only a single time message is published during retries. If not specified then server will automatically add an id to message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sequence")
    private Optional<? extends String> sequence;

    public Message(
            @JsonProperty("data") Optional<? extends String> data,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("sequence") Optional<? extends String> sequence) {
        Utils.checkNotNull(data, "data");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(sequence, "sequence");
        this.data = data;
        this.id = id;
        this.name = name;
        this.sequence = sequence;
    }

    public Optional<? extends String> data() {
        return data;
    }

    /**
     * an optional id if idempotency is needed to ensure only a single time message is published during retries. If not specified then server will automatically add an id to message.
     */
    public Optional<? extends String> id() {
        return id;
    }

    public Optional<? extends String> name() {
        return name;
    }

    public Optional<? extends String> sequence() {
        return sequence;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Message withData(String data) {
        Utils.checkNotNull(data, "data");
        this.data = Optional.ofNullable(data);
        return this;
    }

    public Message withData(Optional<? extends String> data) {
        Utils.checkNotNull(data, "data");
        this.data = data;
        return this;
    }

    /**
     * an optional id if idempotency is needed to ensure only a single time message is published during retries. If not specified then server will automatically add an id to message.
     */
    public Message withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * an optional id if idempotency is needed to ensure only a single time message is published during retries. If not specified then server will automatically add an id to message.
     */
    public Message withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Message withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public Message withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Message withSequence(String sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = Optional.ofNullable(sequence);
        return this;
    }

    public Message withSequence(Optional<? extends String> sequence) {
        Utils.checkNotNull(sequence, "sequence");
        this.sequence = sequence;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Message other = (Message) o;
        return 
            java.util.Objects.deepEquals(this.data, other.data) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.sequence, other.sequence);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            data,
            id,
            name,
            sequence);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Message.class,
                "data", data,
                "id", id,
                "name", name,
                "sequence", sequence);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> data = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> sequence = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder data(String data) {
            Utils.checkNotNull(data, "data");
            this.data = Optional.ofNullable(data);
            return this;
        }

        public Builder data(Optional<? extends String> data) {
            Utils.checkNotNull(data, "data");
            this.data = data;
            return this;
        }

        /**
         * an optional id if idempotency is needed to ensure only a single time message is published during retries. If not specified then server will automatically add an id to message.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * an optional id if idempotency is needed to ensure only a single time message is published during retries. If not specified then server will automatically add an id to message.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder sequence(String sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = Optional.ofNullable(sequence);
            return this;
        }

        public Builder sequence(Optional<? extends String> sequence) {
            Utils.checkNotNull(sequence, "sequence");
            this.sequence = sequence;
            return this;
        }
        
        public Message build() {
            return new Message(
                data,
                id,
                name,
                sequence);
        }
    }
}

