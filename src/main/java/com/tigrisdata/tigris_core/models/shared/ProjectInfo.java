/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ProjectInfo {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends ProjectMetadata> metadata;

    /**
     * Project name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    private Optional<? extends String> project;

    public ProjectInfo(
            @JsonProperty("metadata") Optional<? extends ProjectMetadata> metadata,
            @JsonProperty("project") Optional<? extends String> project) {
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(project, "project");
        this.metadata = metadata;
        this.project = project;
    }

    public Optional<? extends ProjectMetadata> metadata() {
        return metadata;
    }

    /**
     * Project name.
     */
    public Optional<? extends String> project() {
        return project;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ProjectInfo withMetadata(ProjectMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public ProjectInfo withMetadata(Optional<? extends ProjectMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Project name.
     */
    public ProjectInfo withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = Optional.ofNullable(project);
        return this;
    }

    /**
     * Project name.
     */
    public ProjectInfo withProject(Optional<? extends String> project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ProjectInfo other = (ProjectInfo) o;
        return 
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.project, other.project);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            metadata,
            project);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ProjectInfo.class,
                "metadata", metadata,
                "project", project);
    }
    
    public final static class Builder {
 
        private Optional<? extends ProjectMetadata> metadata = Optional.empty();
 
        private Optional<? extends String> project = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder metadata(ProjectMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends ProjectMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Project name.
         */
        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = Optional.ofNullable(project);
            return this;
        }

        /**
         * Project name.
         */
        public Builder project(Optional<? extends String> project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }
        
        public ProjectInfo build() {
            return new ProjectInfo(
                metadata,
                project);
        }
    }
}

