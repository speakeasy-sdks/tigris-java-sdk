/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListBranchesResponse {

    /**
     * List of all the branches in this database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branches")
    private Optional<? extends java.util.List<BranchInfo>> branches;

    public ListBranchesResponse(
            @JsonProperty("branches") Optional<? extends java.util.List<BranchInfo>> branches) {
        Utils.checkNotNull(branches, "branches");
        this.branches = branches;
    }

    /**
     * List of all the branches in this database
     */
    public Optional<? extends java.util.List<BranchInfo>> branches() {
        return branches;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of all the branches in this database
     */
    public ListBranchesResponse withBranches(java.util.List<BranchInfo> branches) {
        Utils.checkNotNull(branches, "branches");
        this.branches = Optional.ofNullable(branches);
        return this;
    }

    /**
     * List of all the branches in this database
     */
    public ListBranchesResponse withBranches(Optional<? extends java.util.List<BranchInfo>> branches) {
        Utils.checkNotNull(branches, "branches");
        this.branches = branches;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListBranchesResponse other = (ListBranchesResponse) o;
        return 
            java.util.Objects.deepEquals(this.branches, other.branches);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            branches);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListBranchesResponse.class,
                "branches", branches);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<BranchInfo>> branches = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of all the branches in this database
         */
        public Builder branches(java.util.List<BranchInfo> branches) {
            Utils.checkNotNull(branches, "branches");
            this.branches = Optional.ofNullable(branches);
            return this;
        }

        /**
         * List of all the branches in this database
         */
        public Builder branches(Optional<? extends java.util.List<BranchInfo>> branches) {
            Utils.checkNotNull(branches, "branches");
            this.branches = branches;
            return this;
        }
        
        public ListBranchesResponse build() {
            return new ListBranchesResponse(
                branches);
        }
    }
}

