/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * AdditionalFunction - Additional function to apply on metrics query
 */

public class AdditionalFunction {

    /**
     * Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rollup")
    private Optional<? extends RollupFunction> rollup;

    public AdditionalFunction(
            @JsonProperty("rollup") Optional<? extends RollupFunction> rollup) {
        Utils.checkNotNull(rollup, "rollup");
        this.rollup = rollup;
    }

    /**
     * Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
     */
    public Optional<? extends RollupFunction> rollup() {
        return rollup;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
     */
    public AdditionalFunction withRollup(RollupFunction rollup) {
        Utils.checkNotNull(rollup, "rollup");
        this.rollup = Optional.ofNullable(rollup);
        return this;
    }

    /**
     * Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
     */
    public AdditionalFunction withRollup(Optional<? extends RollupFunction> rollup) {
        Utils.checkNotNull(rollup, "rollup");
        this.rollup = rollup;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AdditionalFunction other = (AdditionalFunction) o;
        return 
            java.util.Objects.deepEquals(this.rollup, other.rollup);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            rollup);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AdditionalFunction.class,
                "rollup", rollup);
    }
    
    public final static class Builder {
 
        private Optional<? extends RollupFunction> rollup = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
         */
        public Builder rollup(RollupFunction rollup) {
            Utils.checkNotNull(rollup, "rollup");
            this.rollup = Optional.ofNullable(rollup);
            return this;
        }

        /**
         * Rollup function aggregates the slices of metrics returned by original query and lets you operate on the slices using aggregator and constructs the bigger slice of your choice of interval (specified in seconds).
         */
        public Builder rollup(Optional<? extends RollupFunction> rollup) {
            Utils.checkNotNull(rollup, "rollup");
            this.rollup = rollup;
            return this;
        }
        
        public AdditionalFunction build() {
            return new AdditionalFunction(
                rollup);
        }
    }
}

