/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateOrUpdateIndexRequest {

    /**
     * search index name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * If set to `true` then a conflict with HTTP Status code 409 is returned if an index already exists. The default is false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("only_create")
    private Optional<? extends Boolean> onlyCreate;

    /**
     * Tigris project name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    private Optional<? extends String> project;

    /**
     * schema of the index. The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "ecommerce_index",  "description": "an ecommerce store search index",  "properties": {    "name": {      "description": "Name of the product",      "type": "string",      "maxLength": 128    },    "brand": {      "description": "Brand of the product",      "type": "string"    },    "price": {      "description": "Price of the product",      "type": "number"    }  } }`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema")
    private Optional<? extends String> schema;

    public CreateOrUpdateIndexRequest(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("only_create") Optional<? extends Boolean> onlyCreate,
            @JsonProperty("project") Optional<? extends String> project,
            @JsonProperty("schema") Optional<? extends String> schema) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(onlyCreate, "onlyCreate");
        Utils.checkNotNull(project, "project");
        Utils.checkNotNull(schema, "schema");
        this.name = name;
        this.onlyCreate = onlyCreate;
        this.project = project;
        this.schema = schema;
    }

    /**
     * search index name.
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * If set to `true` then a conflict with HTTP Status code 409 is returned if an index already exists. The default is false.
     */
    public Optional<? extends Boolean> onlyCreate() {
        return onlyCreate;
    }

    /**
     * Tigris project name.
     */
    public Optional<? extends String> project() {
        return project;
    }

    /**
     * schema of the index. The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "ecommerce_index",  "description": "an ecommerce store search index",  "properties": {    "name": {      "description": "Name of the product",      "type": "string",      "maxLength": 128    },    "brand": {      "description": "Brand of the product",      "type": "string"    },    "price": {      "description": "Price of the product",      "type": "number"    }  } }`
     */
    public Optional<? extends String> schema() {
        return schema;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * search index name.
     */
    public CreateOrUpdateIndexRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * search index name.
     */
    public CreateOrUpdateIndexRequest withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * If set to `true` then a conflict with HTTP Status code 409 is returned if an index already exists. The default is false.
     */
    public CreateOrUpdateIndexRequest withOnlyCreate(boolean onlyCreate) {
        Utils.checkNotNull(onlyCreate, "onlyCreate");
        this.onlyCreate = Optional.ofNullable(onlyCreate);
        return this;
    }

    /**
     * If set to `true` then a conflict with HTTP Status code 409 is returned if an index already exists. The default is false.
     */
    public CreateOrUpdateIndexRequest withOnlyCreate(Optional<? extends Boolean> onlyCreate) {
        Utils.checkNotNull(onlyCreate, "onlyCreate");
        this.onlyCreate = onlyCreate;
        return this;
    }

    /**
     * Tigris project name.
     */
    public CreateOrUpdateIndexRequest withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = Optional.ofNullable(project);
        return this;
    }

    /**
     * Tigris project name.
     */
    public CreateOrUpdateIndexRequest withProject(Optional<? extends String> project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }

    /**
     * schema of the index. The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "ecommerce_index",  "description": "an ecommerce store search index",  "properties": {    "name": {      "description": "Name of the product",      "type": "string",      "maxLength": 128    },    "brand": {      "description": "Brand of the product",      "type": "string"    },    "price": {      "description": "Price of the product",      "type": "number"    }  } }`
     */
    public CreateOrUpdateIndexRequest withSchema(String schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = Optional.ofNullable(schema);
        return this;
    }

    /**
     * schema of the index. The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "ecommerce_index",  "description": "an ecommerce store search index",  "properties": {    "name": {      "description": "Name of the product",      "type": "string",      "maxLength": 128    },    "brand": {      "description": "Brand of the product",      "type": "string"    },    "price": {      "description": "Price of the product",      "type": "number"    }  } }`
     */
    public CreateOrUpdateIndexRequest withSchema(Optional<? extends String> schema) {
        Utils.checkNotNull(schema, "schema");
        this.schema = schema;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateOrUpdateIndexRequest other = (CreateOrUpdateIndexRequest) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.onlyCreate, other.onlyCreate) &&
            java.util.Objects.deepEquals(this.project, other.project) &&
            java.util.Objects.deepEquals(this.schema, other.schema);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            onlyCreate,
            project,
            schema);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateOrUpdateIndexRequest.class,
                "name", name,
                "onlyCreate", onlyCreate,
                "project", project,
                "schema", schema);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends Boolean> onlyCreate = Optional.empty();
 
        private Optional<? extends String> project = Optional.empty();
 
        private Optional<? extends String> schema = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * search index name.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * search index name.
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * If set to `true` then a conflict with HTTP Status code 409 is returned if an index already exists. The default is false.
         */
        public Builder onlyCreate(boolean onlyCreate) {
            Utils.checkNotNull(onlyCreate, "onlyCreate");
            this.onlyCreate = Optional.ofNullable(onlyCreate);
            return this;
        }

        /**
         * If set to `true` then a conflict with HTTP Status code 409 is returned if an index already exists. The default is false.
         */
        public Builder onlyCreate(Optional<? extends Boolean> onlyCreate) {
            Utils.checkNotNull(onlyCreate, "onlyCreate");
            this.onlyCreate = onlyCreate;
            return this;
        }

        /**
         * Tigris project name.
         */
        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = Optional.ofNullable(project);
            return this;
        }

        /**
         * Tigris project name.
         */
        public Builder project(Optional<? extends String> project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }

        /**
         * schema of the index. The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "ecommerce_index",  "description": "an ecommerce store search index",  "properties": {    "name": {      "description": "Name of the product",      "type": "string",      "maxLength": 128    },    "brand": {      "description": "Brand of the product",      "type": "string"    },    "price": {      "description": "Price of the product",      "type": "number"    }  } }`
         */
        public Builder schema(String schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = Optional.ofNullable(schema);
            return this;
        }

        /**
         * schema of the index. The schema specifications are same as JSON schema specification defined &lt;a href="https://json-schema.org/specification.html" title="here"&gt;here&lt;/a&gt;.&lt;p&gt;&lt;/p&gt; Schema example: `{  "title": "ecommerce_index",  "description": "an ecommerce store search index",  "properties": {    "name": {      "description": "Name of the product",      "type": "string",      "maxLength": 128    },    "brand": {      "description": "Brand of the product",      "type": "string"    },    "price": {      "description": "Price of the product",      "type": "number"    }  } }`
         */
        public Builder schema(Optional<? extends String> schema) {
            Utils.checkNotNull(schema, "schema");
            this.schema = schema;
            return this;
        }
        
        public CreateOrUpdateIndexRequest build() {
            return new CreateOrUpdateIndexRequest(
                name,
                onlyCreate,
                project,
                schema);
        }
    }
}

