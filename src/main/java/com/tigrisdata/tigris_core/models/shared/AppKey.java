/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * AppKey - An user AppKey
 */

public class AppKey {

    /**
     * Created at
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<? extends Long> createdAt;

    /**
     * Created by
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_by")
    private Optional<? extends String> createdBy;

    /**
     * A human readable app description
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<? extends String> description;

    /**
     * Generated client id
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * A human readable app name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * Project it belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    private Optional<? extends String> project;

    /**
     * Generated app secret
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("secret")
    private Optional<? extends String> secret;

    /**
     * Updated at
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<? extends Long> updatedAt;

    /**
     * Updated by
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_by")
    private Optional<? extends String> updatedBy;

    public AppKey(
            @JsonProperty("created_at") Optional<? extends Long> createdAt,
            @JsonProperty("created_by") Optional<? extends String> createdBy,
            @JsonProperty("description") Optional<? extends String> description,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("project") Optional<? extends String> project,
            @JsonProperty("secret") Optional<? extends String> secret,
            @JsonProperty("updated_at") Optional<? extends Long> updatedAt,
            @JsonProperty("updated_by") Optional<? extends String> updatedBy) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(createdBy, "createdBy");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(project, "project");
        Utils.checkNotNull(secret, "secret");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.createdAt = createdAt;
        this.createdBy = createdBy;
        this.description = description;
        this.id = id;
        this.name = name;
        this.project = project;
        this.secret = secret;
        this.updatedAt = updatedAt;
        this.updatedBy = updatedBy;
    }

    /**
     * Created at
     */
    public Optional<? extends Long> createdAt() {
        return createdAt;
    }

    /**
     * Created by
     */
    public Optional<? extends String> createdBy() {
        return createdBy;
    }

    /**
     * A human readable app description
     */
    public Optional<? extends String> description() {
        return description;
    }

    /**
     * Generated client id
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * A human readable app name
     */
    public Optional<? extends String> name() {
        return name;
    }

    /**
     * Project it belongs to
     */
    public Optional<? extends String> project() {
        return project;
    }

    /**
     * Generated app secret
     */
    public Optional<? extends String> secret() {
        return secret;
    }

    /**
     * Updated at
     */
    public Optional<? extends Long> updatedAt() {
        return updatedAt;
    }

    /**
     * Updated by
     */
    public Optional<? extends String> updatedBy() {
        return updatedBy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Created at
     */
    public AppKey withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Created at
     */
    public AppKey withCreatedAt(Optional<? extends Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Created by
     */
    public AppKey withCreatedBy(String createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = Optional.ofNullable(createdBy);
        return this;
    }

    /**
     * Created by
     */
    public AppKey withCreatedBy(Optional<? extends String> createdBy) {
        Utils.checkNotNull(createdBy, "createdBy");
        this.createdBy = createdBy;
        return this;
    }

    /**
     * A human readable app description
     */
    public AppKey withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * A human readable app description
     */
    public AppKey withDescription(Optional<? extends String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Generated client id
     */
    public AppKey withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * Generated client id
     */
    public AppKey withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * A human readable app name
     */
    public AppKey withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * A human readable app name
     */
    public AppKey withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Project it belongs to
     */
    public AppKey withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = Optional.ofNullable(project);
        return this;
    }

    /**
     * Project it belongs to
     */
    public AppKey withProject(Optional<? extends String> project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }

    /**
     * Generated app secret
     */
    public AppKey withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = Optional.ofNullable(secret);
        return this;
    }

    /**
     * Generated app secret
     */
    public AppKey withSecret(Optional<? extends String> secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    /**
     * Updated at
     */
    public AppKey withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Updated at
     */
    public AppKey withUpdatedAt(Optional<? extends Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Updated by
     */
    public AppKey withUpdatedBy(String updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = Optional.ofNullable(updatedBy);
        return this;
    }

    /**
     * Updated by
     */
    public AppKey withUpdatedBy(Optional<? extends String> updatedBy) {
        Utils.checkNotNull(updatedBy, "updatedBy");
        this.updatedBy = updatedBy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AppKey other = (AppKey) o;
        return 
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.createdBy, other.createdBy) &&
            java.util.Objects.deepEquals(this.description, other.description) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.project, other.project) &&
            java.util.Objects.deepEquals(this.secret, other.secret) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.updatedBy, other.updatedBy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            createdAt,
            createdBy,
            description,
            id,
            name,
            project,
            secret,
            updatedAt,
            updatedBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AppKey.class,
                "createdAt", createdAt,
                "createdBy", createdBy,
                "description", description,
                "id", id,
                "name", name,
                "project", project,
                "secret", secret,
                "updatedAt", updatedAt,
                "updatedBy", updatedBy);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> createdAt = Optional.empty();
 
        private Optional<? extends String> createdBy = Optional.empty();
 
        private Optional<? extends String> description = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> project = Optional.empty();
 
        private Optional<? extends String> secret = Optional.empty();
 
        private Optional<? extends Long> updatedAt = Optional.empty();
 
        private Optional<? extends String> updatedBy = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Created at
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Created at
         */
        public Builder createdAt(Optional<? extends Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Created by
         */
        public Builder createdBy(String createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = Optional.ofNullable(createdBy);
            return this;
        }

        /**
         * Created by
         */
        public Builder createdBy(Optional<? extends String> createdBy) {
            Utils.checkNotNull(createdBy, "createdBy");
            this.createdBy = createdBy;
            return this;
        }

        /**
         * A human readable app description
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * A human readable app description
         */
        public Builder description(Optional<? extends String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Generated client id
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * Generated client id
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * A human readable app name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * A human readable app name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Project it belongs to
         */
        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = Optional.ofNullable(project);
            return this;
        }

        /**
         * Project it belongs to
         */
        public Builder project(Optional<? extends String> project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }

        /**
         * Generated app secret
         */
        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = Optional.ofNullable(secret);
            return this;
        }

        /**
         * Generated app secret
         */
        public Builder secret(Optional<? extends String> secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }

        /**
         * Updated at
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Updated at
         */
        public Builder updatedAt(Optional<? extends Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Updated by
         */
        public Builder updatedBy(String updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = Optional.ofNullable(updatedBy);
            return this;
        }

        /**
         * Updated by
         */
        public Builder updatedBy(Optional<? extends String> updatedBy) {
            Utils.checkNotNull(updatedBy, "updatedBy");
            this.updatedBy = updatedBy;
            return this;
        }
        
        public AppKey build() {
            return new AppKey(
                createdAt,
                createdBy,
                description,
                id,
                name,
                project,
                secret,
                updatedAt,
                updatedBy);
        }
    }
}

