/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class IndexDoc {

    /**
     * Actual search document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("doc")
    private Optional<? extends String> doc;

    /**
     * Contains metadata related to the search hit, has information about document created_at/updated_at as well.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends DocMeta> metadata;

    public IndexDoc(
            @JsonProperty("doc") Optional<? extends String> doc,
            @JsonProperty("metadata") Optional<? extends DocMeta> metadata) {
        Utils.checkNotNull(doc, "doc");
        Utils.checkNotNull(metadata, "metadata");
        this.doc = doc;
        this.metadata = metadata;
    }

    /**
     * Actual search document
     */
    public Optional<? extends String> doc() {
        return doc;
    }

    /**
     * Contains metadata related to the search hit, has information about document created_at/updated_at as well.
     */
    public Optional<? extends DocMeta> metadata() {
        return metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Actual search document
     */
    public IndexDoc withDoc(String doc) {
        Utils.checkNotNull(doc, "doc");
        this.doc = Optional.ofNullable(doc);
        return this;
    }

    /**
     * Actual search document
     */
    public IndexDoc withDoc(Optional<? extends String> doc) {
        Utils.checkNotNull(doc, "doc");
        this.doc = doc;
        return this;
    }

    /**
     * Contains metadata related to the search hit, has information about document created_at/updated_at as well.
     */
    public IndexDoc withMetadata(DocMeta metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Contains metadata related to the search hit, has information about document created_at/updated_at as well.
     */
    public IndexDoc withMetadata(Optional<? extends DocMeta> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IndexDoc other = (IndexDoc) o;
        return 
            java.util.Objects.deepEquals(this.doc, other.doc) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            doc,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IndexDoc.class,
                "doc", doc,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> doc = Optional.empty();
 
        private Optional<? extends DocMeta> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Actual search document
         */
        public Builder doc(String doc) {
            Utils.checkNotNull(doc, "doc");
            this.doc = Optional.ofNullable(doc);
            return this;
        }

        /**
         * Actual search document
         */
        public Builder doc(Optional<? extends String> doc) {
            Utils.checkNotNull(doc, "doc");
            this.doc = doc;
            return this;
        }

        /**
         * Contains metadata related to the search hit, has information about document created_at/updated_at as well.
         */
        public Builder metadata(DocMeta metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Contains metadata related to the search hit, has information about document created_at/updated_at as well.
         */
        public Builder metadata(Optional<? extends DocMeta> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public IndexDoc build() {
            return new IndexDoc(
                doc,
                metadata);
        }
    }
}

