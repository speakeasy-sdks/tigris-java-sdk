/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ImportRequest {

    /**
     * The list of autogenerated fields of the collection
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("autogenerated")
    private Optional<? extends java.util.List<String>> autogenerated;

    /**
     * Optionally specify a database branch name to perform operation on
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    private Optional<? extends String> branch;

    /**
     * Allow to create collection if it doesn't exists
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_collection")
    private Optional<? extends Boolean> createCollection;

    /**
     * Array of documents to import. Each document is a JSON object.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("documents")
    private Optional<? extends java.util.List<Documents>> documents;

    /**
     * additional options for import requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends ImportRequestOptions> options;

    /**
     * List of fields which constitutes primary key of the collection If not specified and field with name 'id' is present, it's used as a primary key, further if inferred type is UUID, then it's set as autogenerated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_key")
    private Optional<? extends java.util.List<String>> primaryKey;

    public ImportRequest(
            @JsonProperty("autogenerated") Optional<? extends java.util.List<String>> autogenerated,
            @JsonProperty("branch") Optional<? extends String> branch,
            @JsonProperty("create_collection") Optional<? extends Boolean> createCollection,
            @JsonProperty("documents") Optional<? extends java.util.List<Documents>> documents,
            @JsonProperty("options") Optional<? extends ImportRequestOptions> options,
            @JsonProperty("primary_key") Optional<? extends java.util.List<String>> primaryKey) {
        Utils.checkNotNull(autogenerated, "autogenerated");
        Utils.checkNotNull(branch, "branch");
        Utils.checkNotNull(createCollection, "createCollection");
        Utils.checkNotNull(documents, "documents");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(primaryKey, "primaryKey");
        this.autogenerated = autogenerated;
        this.branch = branch;
        this.createCollection = createCollection;
        this.documents = documents;
        this.options = options;
        this.primaryKey = primaryKey;
    }

    /**
     * The list of autogenerated fields of the collection
     */
    public Optional<? extends java.util.List<String>> autogenerated() {
        return autogenerated;
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public Optional<? extends String> branch() {
        return branch;
    }

    /**
     * Allow to create collection if it doesn't exists
     */
    public Optional<? extends Boolean> createCollection() {
        return createCollection;
    }

    /**
     * Array of documents to import. Each document is a JSON object.
     */
    public Optional<? extends java.util.List<Documents>> documents() {
        return documents;
    }

    /**
     * additional options for import requests.
     */
    public Optional<? extends ImportRequestOptions> options() {
        return options;
    }

    /**
     * List of fields which constitutes primary key of the collection If not specified and field with name 'id' is present, it's used as a primary key, further if inferred type is UUID, then it's set as autogenerated.
     */
    public Optional<? extends java.util.List<String>> primaryKey() {
        return primaryKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The list of autogenerated fields of the collection
     */
    public ImportRequest withAutogenerated(java.util.List<String> autogenerated) {
        Utils.checkNotNull(autogenerated, "autogenerated");
        this.autogenerated = Optional.ofNullable(autogenerated);
        return this;
    }

    /**
     * The list of autogenerated fields of the collection
     */
    public ImportRequest withAutogenerated(Optional<? extends java.util.List<String>> autogenerated) {
        Utils.checkNotNull(autogenerated, "autogenerated");
        this.autogenerated = autogenerated;
        return this;
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public ImportRequest withBranch(String branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = Optional.ofNullable(branch);
        return this;
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public ImportRequest withBranch(Optional<? extends String> branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = branch;
        return this;
    }

    /**
     * Allow to create collection if it doesn't exists
     */
    public ImportRequest withCreateCollection(boolean createCollection) {
        Utils.checkNotNull(createCollection, "createCollection");
        this.createCollection = Optional.ofNullable(createCollection);
        return this;
    }

    /**
     * Allow to create collection if it doesn't exists
     */
    public ImportRequest withCreateCollection(Optional<? extends Boolean> createCollection) {
        Utils.checkNotNull(createCollection, "createCollection");
        this.createCollection = createCollection;
        return this;
    }

    /**
     * Array of documents to import. Each document is a JSON object.
     */
    public ImportRequest withDocuments(java.util.List<Documents> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = Optional.ofNullable(documents);
        return this;
    }

    /**
     * Array of documents to import. Each document is a JSON object.
     */
    public ImportRequest withDocuments(Optional<? extends java.util.List<Documents>> documents) {
        Utils.checkNotNull(documents, "documents");
        this.documents = documents;
        return this;
    }

    /**
     * additional options for import requests.
     */
    public ImportRequest withOptions(ImportRequestOptions options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    /**
     * additional options for import requests.
     */
    public ImportRequest withOptions(Optional<? extends ImportRequestOptions> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    /**
     * List of fields which constitutes primary key of the collection If not specified and field with name 'id' is present, it's used as a primary key, further if inferred type is UUID, then it's set as autogenerated.
     */
    public ImportRequest withPrimaryKey(java.util.List<String> primaryKey) {
        Utils.checkNotNull(primaryKey, "primaryKey");
        this.primaryKey = Optional.ofNullable(primaryKey);
        return this;
    }

    /**
     * List of fields which constitutes primary key of the collection If not specified and field with name 'id' is present, it's used as a primary key, further if inferred type is UUID, then it's set as autogenerated.
     */
    public ImportRequest withPrimaryKey(Optional<? extends java.util.List<String>> primaryKey) {
        Utils.checkNotNull(primaryKey, "primaryKey");
        this.primaryKey = primaryKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ImportRequest other = (ImportRequest) o;
        return 
            java.util.Objects.deepEquals(this.autogenerated, other.autogenerated) &&
            java.util.Objects.deepEquals(this.branch, other.branch) &&
            java.util.Objects.deepEquals(this.createCollection, other.createCollection) &&
            java.util.Objects.deepEquals(this.documents, other.documents) &&
            java.util.Objects.deepEquals(this.options, other.options) &&
            java.util.Objects.deepEquals(this.primaryKey, other.primaryKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            autogenerated,
            branch,
            createCollection,
            documents,
            options,
            primaryKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ImportRequest.class,
                "autogenerated", autogenerated,
                "branch", branch,
                "createCollection", createCollection,
                "documents", documents,
                "options", options,
                "primaryKey", primaryKey);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> autogenerated = Optional.empty();
 
        private Optional<? extends String> branch = Optional.empty();
 
        private Optional<? extends Boolean> createCollection = Optional.empty();
 
        private Optional<? extends java.util.List<Documents>> documents = Optional.empty();
 
        private Optional<? extends ImportRequestOptions> options = Optional.empty();
 
        private Optional<? extends java.util.List<String>> primaryKey = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The list of autogenerated fields of the collection
         */
        public Builder autogenerated(java.util.List<String> autogenerated) {
            Utils.checkNotNull(autogenerated, "autogenerated");
            this.autogenerated = Optional.ofNullable(autogenerated);
            return this;
        }

        /**
         * The list of autogenerated fields of the collection
         */
        public Builder autogenerated(Optional<? extends java.util.List<String>> autogenerated) {
            Utils.checkNotNull(autogenerated, "autogenerated");
            this.autogenerated = autogenerated;
            return this;
        }

        /**
         * Optionally specify a database branch name to perform operation on
         */
        public Builder branch(String branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = Optional.ofNullable(branch);
            return this;
        }

        /**
         * Optionally specify a database branch name to perform operation on
         */
        public Builder branch(Optional<? extends String> branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = branch;
            return this;
        }

        /**
         * Allow to create collection if it doesn't exists
         */
        public Builder createCollection(boolean createCollection) {
            Utils.checkNotNull(createCollection, "createCollection");
            this.createCollection = Optional.ofNullable(createCollection);
            return this;
        }

        /**
         * Allow to create collection if it doesn't exists
         */
        public Builder createCollection(Optional<? extends Boolean> createCollection) {
            Utils.checkNotNull(createCollection, "createCollection");
            this.createCollection = createCollection;
            return this;
        }

        /**
         * Array of documents to import. Each document is a JSON object.
         */
        public Builder documents(java.util.List<Documents> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = Optional.ofNullable(documents);
            return this;
        }

        /**
         * Array of documents to import. Each document is a JSON object.
         */
        public Builder documents(Optional<? extends java.util.List<Documents>> documents) {
            Utils.checkNotNull(documents, "documents");
            this.documents = documents;
            return this;
        }

        /**
         * additional options for import requests.
         */
        public Builder options(ImportRequestOptions options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * additional options for import requests.
         */
        public Builder options(Optional<? extends ImportRequestOptions> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }

        /**
         * List of fields which constitutes primary key of the collection If not specified and field with name 'id' is present, it's used as a primary key, further if inferred type is UUID, then it's set as autogenerated.
         */
        public Builder primaryKey(java.util.List<String> primaryKey) {
            Utils.checkNotNull(primaryKey, "primaryKey");
            this.primaryKey = Optional.ofNullable(primaryKey);
            return this;
        }

        /**
         * List of fields which constitutes primary key of the collection If not specified and field with name 'id' is present, it's used as a primary key, further if inferred type is UUID, then it's set as autogenerated.
         */
        public Builder primaryKey(Optional<? extends java.util.List<String>> primaryKey) {
            Utils.checkNotNull(primaryKey, "primaryKey");
            this.primaryKey = primaryKey;
            return this;
        }
        
        public ImportRequest build() {
            return new ImportRequest(
                autogenerated,
                branch,
                createCollection,
                documents,
                options,
                primaryKey);
        }
    }
}

