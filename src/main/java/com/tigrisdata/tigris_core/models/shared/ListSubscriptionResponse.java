/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListSubscriptionResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("devices")
    private Optional<? extends java.util.List<String>> devices;

    public ListSubscriptionResponse(
            @JsonProperty("devices") Optional<? extends java.util.List<String>> devices) {
        Utils.checkNotNull(devices, "devices");
        this.devices = devices;
    }

    public Optional<? extends java.util.List<String>> devices() {
        return devices;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListSubscriptionResponse withDevices(java.util.List<String> devices) {
        Utils.checkNotNull(devices, "devices");
        this.devices = Optional.ofNullable(devices);
        return this;
    }

    public ListSubscriptionResponse withDevices(Optional<? extends java.util.List<String>> devices) {
        Utils.checkNotNull(devices, "devices");
        this.devices = devices;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListSubscriptionResponse other = (ListSubscriptionResponse) o;
        return 
            java.util.Objects.deepEquals(this.devices, other.devices);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            devices);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListSubscriptionResponse.class,
                "devices", devices);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> devices = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder devices(java.util.List<String> devices) {
            Utils.checkNotNull(devices, "devices");
            this.devices = Optional.ofNullable(devices);
            return this;
        }

        public Builder devices(Optional<? extends java.util.List<String>> devices) {
            Utils.checkNotNull(devices, "devices");
            this.devices = devices;
            return this;
        }
        
        public ListSubscriptionResponse build() {
            return new ListSubscriptionResponse(
                devices);
        }
    }
}

