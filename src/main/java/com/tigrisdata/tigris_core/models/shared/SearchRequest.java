/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SearchRequest {

    /**
     * Optionally specify a database branch name to perform operation on
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    private Optional<? extends String> branch;

    /**
     * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collation")
    private Optional<? extends Collation> collation;

    /**
     * Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exclude_fields")
    private Optional<? extends java.util.List<String>> excludeFields;

    /**
     * Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facet")
    private Optional<? extends Facet> facet;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private Optional<? extends SearchRequestFields> fields;

    /**
     * Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filter")
    private Optional<? extends SearchRequestFilter> filter;

    /**
     * Array of document field names to include in results. By default, all fields are included.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("include_fields")
    private Optional<? extends java.util.List<String>> includeFields;

    /**
     * Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page")
    private Optional<? extends Integer> page;

    /**
     * Optionally can set the number of hits to be returned per page, default is 20.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_size")
    private Optional<? extends Integer> pageSize;

    /**
     * Query string for searching across text fields
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("q")
    private Optional<? extends String> q;

    /**
     * Array of fields to project search query against
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_fields")
    private Optional<? extends java.util.List<String>> searchFields;

    /**
     * Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sort")
    private Optional<? extends Sort> sort;

    public SearchRequest(
            @JsonProperty("branch") Optional<? extends String> branch,
            @JsonProperty("collation") Optional<? extends Collation> collation,
            @JsonProperty("exclude_fields") Optional<? extends java.util.List<String>> excludeFields,
            @JsonProperty("facet") Optional<? extends Facet> facet,
            @JsonProperty("fields") Optional<? extends SearchRequestFields> fields,
            @JsonProperty("filter") Optional<? extends SearchRequestFilter> filter,
            @JsonProperty("include_fields") Optional<? extends java.util.List<String>> includeFields,
            @JsonProperty("page") Optional<? extends Integer> page,
            @JsonProperty("page_size") Optional<? extends Integer> pageSize,
            @JsonProperty("q") Optional<? extends String> q,
            @JsonProperty("search_fields") Optional<? extends java.util.List<String>> searchFields,
            @JsonProperty("sort") Optional<? extends Sort> sort) {
        Utils.checkNotNull(branch, "branch");
        Utils.checkNotNull(collation, "collation");
        Utils.checkNotNull(excludeFields, "excludeFields");
        Utils.checkNotNull(facet, "facet");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(filter, "filter");
        Utils.checkNotNull(includeFields, "includeFields");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(q, "q");
        Utils.checkNotNull(searchFields, "searchFields");
        Utils.checkNotNull(sort, "sort");
        this.branch = branch;
        this.collation = collation;
        this.excludeFields = excludeFields;
        this.facet = facet;
        this.fields = fields;
        this.filter = filter;
        this.includeFields = includeFields;
        this.page = page;
        this.pageSize = pageSize;
        this.q = q;
        this.searchFields = searchFields;
        this.sort = sort;
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public Optional<? extends String> branch() {
        return branch;
    }

    /**
     * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
     */
    public Optional<? extends Collation> collation() {
        return collation;
    }

    /**
     * Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
     */
    public Optional<? extends java.util.List<String>> excludeFields() {
        return excludeFields;
    }

    /**
     * Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
     */
    public Optional<? extends Facet> facet() {
        return facet;
    }

    public Optional<? extends SearchRequestFields> fields() {
        return fields;
    }

    /**
     * Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
     */
    public Optional<? extends SearchRequestFilter> filter() {
        return filter;
    }

    /**
     * Array of document field names to include in results. By default, all fields are included.
     */
    public Optional<? extends java.util.List<String>> includeFields() {
        return includeFields;
    }

    /**
     * Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
     */
    public Optional<? extends Integer> page() {
        return page;
    }

    /**
     * Optionally can set the number of hits to be returned per page, default is 20.
     */
    public Optional<? extends Integer> pageSize() {
        return pageSize;
    }

    /**
     * Query string for searching across text fields
     */
    public Optional<? extends String> q() {
        return q;
    }

    /**
     * Array of fields to project search query against
     */
    public Optional<? extends java.util.List<String>> searchFields() {
        return searchFields;
    }

    /**
     * Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
     */
    public Optional<? extends Sort> sort() {
        return sort;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public SearchRequest withBranch(String branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = Optional.ofNullable(branch);
        return this;
    }

    /**
     * Optionally specify a database branch name to perform operation on
     */
    public SearchRequest withBranch(Optional<? extends String> branch) {
        Utils.checkNotNull(branch, "branch");
        this.branch = branch;
        return this;
    }

    /**
     * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
     */
    public SearchRequest withCollation(Collation collation) {
        Utils.checkNotNull(collation, "collation");
        this.collation = Optional.ofNullable(collation);
        return this;
    }

    /**
     * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
     */
    public SearchRequest withCollation(Optional<? extends Collation> collation) {
        Utils.checkNotNull(collation, "collation");
        this.collation = collation;
        return this;
    }

    /**
     * Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
     */
    public SearchRequest withExcludeFields(java.util.List<String> excludeFields) {
        Utils.checkNotNull(excludeFields, "excludeFields");
        this.excludeFields = Optional.ofNullable(excludeFields);
        return this;
    }

    /**
     * Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
     */
    public SearchRequest withExcludeFields(Optional<? extends java.util.List<String>> excludeFields) {
        Utils.checkNotNull(excludeFields, "excludeFields");
        this.excludeFields = excludeFields;
        return this;
    }

    /**
     * Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
     */
    public SearchRequest withFacet(Facet facet) {
        Utils.checkNotNull(facet, "facet");
        this.facet = Optional.ofNullable(facet);
        return this;
    }

    /**
     * Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
     */
    public SearchRequest withFacet(Optional<? extends Facet> facet) {
        Utils.checkNotNull(facet, "facet");
        this.facet = facet;
        return this;
    }

    public SearchRequest withFields(SearchRequestFields fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    public SearchRequest withFields(Optional<? extends SearchRequestFields> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
     */
    public SearchRequest withFilter(SearchRequestFilter filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = Optional.ofNullable(filter);
        return this;
    }

    /**
     * Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
     */
    public SearchRequest withFilter(Optional<? extends SearchRequestFilter> filter) {
        Utils.checkNotNull(filter, "filter");
        this.filter = filter;
        return this;
    }

    /**
     * Array of document field names to include in results. By default, all fields are included.
     */
    public SearchRequest withIncludeFields(java.util.List<String> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = Optional.ofNullable(includeFields);
        return this;
    }

    /**
     * Array of document field names to include in results. By default, all fields are included.
     */
    public SearchRequest withIncludeFields(Optional<? extends java.util.List<String>> includeFields) {
        Utils.checkNotNull(includeFields, "includeFields");
        this.includeFields = includeFields;
        return this;
    }

    /**
     * Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
     */
    public SearchRequest withPage(int page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
     */
    public SearchRequest withPage(Optional<? extends Integer> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Optionally can set the number of hits to be returned per page, default is 20.
     */
    public SearchRequest withPageSize(int pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    /**
     * Optionally can set the number of hits to be returned per page, default is 20.
     */
    public SearchRequest withPageSize(Optional<? extends Integer> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    /**
     * Query string for searching across text fields
     */
    public SearchRequest withQ(String q) {
        Utils.checkNotNull(q, "q");
        this.q = Optional.ofNullable(q);
        return this;
    }

    /**
     * Query string for searching across text fields
     */
    public SearchRequest withQ(Optional<? extends String> q) {
        Utils.checkNotNull(q, "q");
        this.q = q;
        return this;
    }

    /**
     * Array of fields to project search query against
     */
    public SearchRequest withSearchFields(java.util.List<String> searchFields) {
        Utils.checkNotNull(searchFields, "searchFields");
        this.searchFields = Optional.ofNullable(searchFields);
        return this;
    }

    /**
     * Array of fields to project search query against
     */
    public SearchRequest withSearchFields(Optional<? extends java.util.List<String>> searchFields) {
        Utils.checkNotNull(searchFields, "searchFields");
        this.searchFields = searchFields;
        return this;
    }

    /**
     * Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
     */
    public SearchRequest withSort(Sort sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }

    /**
     * Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
     */
    public SearchRequest withSort(Optional<? extends Sort> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchRequest other = (SearchRequest) o;
        return 
            java.util.Objects.deepEquals(this.branch, other.branch) &&
            java.util.Objects.deepEquals(this.collation, other.collation) &&
            java.util.Objects.deepEquals(this.excludeFields, other.excludeFields) &&
            java.util.Objects.deepEquals(this.facet, other.facet) &&
            java.util.Objects.deepEquals(this.fields, other.fields) &&
            java.util.Objects.deepEquals(this.filter, other.filter) &&
            java.util.Objects.deepEquals(this.includeFields, other.includeFields) &&
            java.util.Objects.deepEquals(this.page, other.page) &&
            java.util.Objects.deepEquals(this.pageSize, other.pageSize) &&
            java.util.Objects.deepEquals(this.q, other.q) &&
            java.util.Objects.deepEquals(this.searchFields, other.searchFields) &&
            java.util.Objects.deepEquals(this.sort, other.sort);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            branch,
            collation,
            excludeFields,
            facet,
            fields,
            filter,
            includeFields,
            page,
            pageSize,
            q,
            searchFields,
            sort);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchRequest.class,
                "branch", branch,
                "collation", collation,
                "excludeFields", excludeFields,
                "facet", facet,
                "fields", fields,
                "filter", filter,
                "includeFields", includeFields,
                "page", page,
                "pageSize", pageSize,
                "q", q,
                "searchFields", searchFields,
                "sort", sort);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> branch = Optional.empty();
 
        private Optional<? extends Collation> collation = Optional.empty();
 
        private Optional<? extends java.util.List<String>> excludeFields = Optional.empty();
 
        private Optional<? extends Facet> facet = Optional.empty();
 
        private Optional<? extends SearchRequestFields> fields = Optional.empty();
 
        private Optional<? extends SearchRequestFilter> filter = Optional.empty();
 
        private Optional<? extends java.util.List<String>> includeFields = Optional.empty();
 
        private Optional<? extends Integer> page = Optional.empty();
 
        private Optional<? extends Integer> pageSize = Optional.empty();
 
        private Optional<? extends String> q = Optional.empty();
 
        private Optional<? extends java.util.List<String>> searchFields = Optional.empty();
 
        private Optional<? extends Sort> sort = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Optionally specify a database branch name to perform operation on
         */
        public Builder branch(String branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = Optional.ofNullable(branch);
            return this;
        }

        /**
         * Optionally specify a database branch name to perform operation on
         */
        public Builder branch(Optional<? extends String> branch) {
            Utils.checkNotNull(branch, "branch");
            this.branch = branch;
            return this;
        }

        /**
         * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
         */
        public Builder collation(Collation collation) {
            Utils.checkNotNull(collation, "collation");
            this.collation = Optional.ofNullable(collation);
            return this;
        }

        /**
         * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
         */
        public Builder collation(Optional<? extends Collation> collation) {
            Utils.checkNotNull(collation, "collation");
            this.collation = collation;
            return this;
        }

        /**
         * Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
         */
        public Builder excludeFields(java.util.List<String> excludeFields) {
            Utils.checkNotNull(excludeFields, "excludeFields");
            this.excludeFields = Optional.ofNullable(excludeFields);
            return this;
        }

        /**
         * Array of document field names to exclude from results. `include_fields`, if specified, takes precedence over `exclude_fields`.
         */
        public Builder excludeFields(Optional<? extends java.util.List<String>> excludeFields) {
            Utils.checkNotNull(excludeFields, "excludeFields");
            this.excludeFields = excludeFields;
            return this;
        }

        /**
         * Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
         */
        public Builder facet(Facet facet) {
            Utils.checkNotNull(facet, "facet");
            this.facet = Optional.ofNullable(facet);
            return this;
        }

        /**
         * Facet query to aggregate results on given fields. The field name for the facet search can be passed like this `{"brand": { "size": 10 }}` where the size controls the total facets for this field.
         */
        public Builder facet(Optional<? extends Facet> facet) {
            Utils.checkNotNull(facet, "facet");
            this.facet = facet;
            return this;
        }

        public Builder fields(SearchRequestFields fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        public Builder fields(Optional<? extends SearchRequestFields> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
         */
        public Builder filter(SearchRequestFilter filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = Optional.ofNullable(filter);
            return this;
        }

        /**
         * Filter stacks on top of query results to further narrow down the results. Similar to `ReadRequest.filter`
         */
        public Builder filter(Optional<? extends SearchRequestFilter> filter) {
            Utils.checkNotNull(filter, "filter");
            this.filter = filter;
            return this;
        }

        /**
         * Array of document field names to include in results. By default, all fields are included.
         */
        public Builder includeFields(java.util.List<String> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = Optional.ofNullable(includeFields);
            return this;
        }

        /**
         * Array of document field names to include in results. By default, all fields are included.
         */
        public Builder includeFields(Optional<? extends java.util.List<String>> includeFields) {
            Utils.checkNotNull(includeFields, "includeFields");
            this.includeFields = includeFields;
            return this;
        }

        /**
         * Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
         */
        public Builder page(int page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * Optionally can specify the page to retrieve. If page is set then only hits for this page is returned
         */
        public Builder page(Optional<? extends Integer> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Optionally can set the number of hits to be returned per page, default is 20.
         */
        public Builder pageSize(int pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        /**
         * Optionally can set the number of hits to be returned per page, default is 20.
         */
        public Builder pageSize(Optional<? extends Integer> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        /**
         * Query string for searching across text fields
         */
        public Builder q(String q) {
            Utils.checkNotNull(q, "q");
            this.q = Optional.ofNullable(q);
            return this;
        }

        /**
         * Query string for searching across text fields
         */
        public Builder q(Optional<? extends String> q) {
            Utils.checkNotNull(q, "q");
            this.q = q;
            return this;
        }

        /**
         * Array of fields to project search query against
         */
        public Builder searchFields(java.util.List<String> searchFields) {
            Utils.checkNotNull(searchFields, "searchFields");
            this.searchFields = Optional.ofNullable(searchFields);
            return this;
        }

        /**
         * Array of fields to project search query against
         */
        public Builder searchFields(Optional<? extends java.util.List<String>> searchFields) {
            Utils.checkNotNull(searchFields, "searchFields");
            this.searchFields = searchFields;
            return this;
        }

        /**
         * Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
         */
        public Builder sort(Sort sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        /**
         * Array of fields and corresponding sort orders to order the results `[{ "salary": "$desc" }]`
         */
        public Builder sort(Optional<? extends Sort> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }
        
        public SearchRequest build() {
            return new SearchRequest(
                branch,
                collation,
                excludeFields,
                facet,
                fields,
                filter,
                includeFields,
                page,
                pageSize,
                q,
                searchFields,
                sort);
        }
    }
}

