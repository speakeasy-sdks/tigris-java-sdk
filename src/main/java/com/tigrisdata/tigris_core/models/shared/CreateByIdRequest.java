/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateByIdRequest {

    /**
     * A JSON document that needs to be indexed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document")
    private Optional<? extends String> document;

    /**
     * document id.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * index name where to create document.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("index")
    private Optional<? extends String> index;

    /**
     * Tigris project name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    private Optional<? extends String> project;

    public CreateByIdRequest(
            @JsonProperty("document") Optional<? extends String> document,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("index") Optional<? extends String> index,
            @JsonProperty("project") Optional<? extends String> project) {
        Utils.checkNotNull(document, "document");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(index, "index");
        Utils.checkNotNull(project, "project");
        this.document = document;
        this.id = id;
        this.index = index;
        this.project = project;
    }

    /**
     * A JSON document that needs to be indexed.
     */
    public Optional<? extends String> document() {
        return document;
    }

    /**
     * document id.
     */
    public Optional<? extends String> id() {
        return id;
    }

    /**
     * index name where to create document.
     */
    public Optional<? extends String> index() {
        return index;
    }

    /**
     * Tigris project name.
     */
    public Optional<? extends String> project() {
        return project;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A JSON document that needs to be indexed.
     */
    public CreateByIdRequest withDocument(String document) {
        Utils.checkNotNull(document, "document");
        this.document = Optional.ofNullable(document);
        return this;
    }

    /**
     * A JSON document that needs to be indexed.
     */
    public CreateByIdRequest withDocument(Optional<? extends String> document) {
        Utils.checkNotNull(document, "document");
        this.document = document;
        return this;
    }

    /**
     * document id.
     */
    public CreateByIdRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * document id.
     */
    public CreateByIdRequest withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * index name where to create document.
     */
    public CreateByIdRequest withIndex(String index) {
        Utils.checkNotNull(index, "index");
        this.index = Optional.ofNullable(index);
        return this;
    }

    /**
     * index name where to create document.
     */
    public CreateByIdRequest withIndex(Optional<? extends String> index) {
        Utils.checkNotNull(index, "index");
        this.index = index;
        return this;
    }

    /**
     * Tigris project name.
     */
    public CreateByIdRequest withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = Optional.ofNullable(project);
        return this;
    }

    /**
     * Tigris project name.
     */
    public CreateByIdRequest withProject(Optional<? extends String> project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateByIdRequest other = (CreateByIdRequest) o;
        return 
            java.util.Objects.deepEquals(this.document, other.document) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.index, other.index) &&
            java.util.Objects.deepEquals(this.project, other.project);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            document,
            id,
            index,
            project);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateByIdRequest.class,
                "document", document,
                "id", id,
                "index", index,
                "project", project);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> document = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends String> index = Optional.empty();
 
        private Optional<? extends String> project = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A JSON document that needs to be indexed.
         */
        public Builder document(String document) {
            Utils.checkNotNull(document, "document");
            this.document = Optional.ofNullable(document);
            return this;
        }

        /**
         * A JSON document that needs to be indexed.
         */
        public Builder document(Optional<? extends String> document) {
            Utils.checkNotNull(document, "document");
            this.document = document;
            return this;
        }

        /**
         * document id.
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * document id.
         */
        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * index name where to create document.
         */
        public Builder index(String index) {
            Utils.checkNotNull(index, "index");
            this.index = Optional.ofNullable(index);
            return this;
        }

        /**
         * index name where to create document.
         */
        public Builder index(Optional<? extends String> index) {
            Utils.checkNotNull(index, "index");
            this.index = index;
            return this;
        }

        /**
         * Tigris project name.
         */
        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = Optional.ofNullable(project);
            return this;
        }

        /**
         * Tigris project name.
         */
        public Builder project(Optional<? extends String> project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }
        
        public CreateByIdRequest build() {
            return new CreateByIdRequest(
                document,
                id,
                index,
                project);
        }
    }
}

