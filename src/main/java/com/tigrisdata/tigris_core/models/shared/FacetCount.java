/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class FacetCount {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<? extends Long> count;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends String> value;

    public FacetCount(
            @JsonProperty("count") Optional<? extends Long> count,
            @JsonProperty("value") Optional<? extends String> value) {
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(value, "value");
        this.count = count;
        this.value = value;
    }

    public Optional<? extends Long> count() {
        return count;
    }

    public Optional<? extends String> value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public FacetCount withCount(long count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    public FacetCount withCount(Optional<? extends Long> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    public FacetCount withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public FacetCount withValue(Optional<? extends String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FacetCount other = (FacetCount) o;
        return 
            java.util.Objects.deepEquals(this.count, other.count) &&
            java.util.Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            count,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FacetCount.class,
                "count", count,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> count = Optional.empty();
 
        private Optional<? extends String> value = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder count(long count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        public Builder count(Optional<? extends Long> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<? extends String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public FacetCount build() {
            return new FacetCount(
                count,
                value);
        }
    }
}

