/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * DescribeDatabaseResponse - A detailed description of the database and all the associated collections. Description of the collection includes schema details as well.
 */

public class DescribeDatabaseResponse {

    /**
     * List of all the branches in this database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branches")
    private Optional<? extends java.util.List<String>> branches;

    /**
     * A detailed description about all the collections. The description returns collection metadata and the schema.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collections")
    private Optional<? extends java.util.List<CollectionDescription>> collections;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends DatabaseMetadata> metadata;

    /**
     * Sum of all the collections sizes present in this database
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<? extends Long> size;

    public DescribeDatabaseResponse(
            @JsonProperty("branches") Optional<? extends java.util.List<String>> branches,
            @JsonProperty("collections") Optional<? extends java.util.List<CollectionDescription>> collections,
            @JsonProperty("metadata") Optional<? extends DatabaseMetadata> metadata,
            @JsonProperty("size") Optional<? extends Long> size) {
        Utils.checkNotNull(branches, "branches");
        Utils.checkNotNull(collections, "collections");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(size, "size");
        this.branches = branches;
        this.collections = collections;
        this.metadata = metadata;
        this.size = size;
    }

    /**
     * List of all the branches in this database
     */
    public Optional<? extends java.util.List<String>> branches() {
        return branches;
    }

    /**
     * A detailed description about all the collections. The description returns collection metadata and the schema.
     */
    public Optional<? extends java.util.List<CollectionDescription>> collections() {
        return collections;
    }

    public Optional<? extends DatabaseMetadata> metadata() {
        return metadata;
    }

    /**
     * Sum of all the collections sizes present in this database
     */
    public Optional<? extends Long> size() {
        return size;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of all the branches in this database
     */
    public DescribeDatabaseResponse withBranches(java.util.List<String> branches) {
        Utils.checkNotNull(branches, "branches");
        this.branches = Optional.ofNullable(branches);
        return this;
    }

    /**
     * List of all the branches in this database
     */
    public DescribeDatabaseResponse withBranches(Optional<? extends java.util.List<String>> branches) {
        Utils.checkNotNull(branches, "branches");
        this.branches = branches;
        return this;
    }

    /**
     * A detailed description about all the collections. The description returns collection metadata and the schema.
     */
    public DescribeDatabaseResponse withCollections(java.util.List<CollectionDescription> collections) {
        Utils.checkNotNull(collections, "collections");
        this.collections = Optional.ofNullable(collections);
        return this;
    }

    /**
     * A detailed description about all the collections. The description returns collection metadata and the schema.
     */
    public DescribeDatabaseResponse withCollections(Optional<? extends java.util.List<CollectionDescription>> collections) {
        Utils.checkNotNull(collections, "collections");
        this.collections = collections;
        return this;
    }

    public DescribeDatabaseResponse withMetadata(DatabaseMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public DescribeDatabaseResponse withMetadata(Optional<? extends DatabaseMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    /**
     * Sum of all the collections sizes present in this database
     */
    public DescribeDatabaseResponse withSize(long size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    /**
     * Sum of all the collections sizes present in this database
     */
    public DescribeDatabaseResponse withSize(Optional<? extends Long> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DescribeDatabaseResponse other = (DescribeDatabaseResponse) o;
        return 
            java.util.Objects.deepEquals(this.branches, other.branches) &&
            java.util.Objects.deepEquals(this.collections, other.collections) &&
            java.util.Objects.deepEquals(this.metadata, other.metadata) &&
            java.util.Objects.deepEquals(this.size, other.size);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            branches,
            collections,
            metadata,
            size);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DescribeDatabaseResponse.class,
                "branches", branches,
                "collections", collections,
                "metadata", metadata,
                "size", size);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> branches = Optional.empty();
 
        private Optional<? extends java.util.List<CollectionDescription>> collections = Optional.empty();
 
        private Optional<? extends DatabaseMetadata> metadata = Optional.empty();
 
        private Optional<? extends Long> size = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of all the branches in this database
         */
        public Builder branches(java.util.List<String> branches) {
            Utils.checkNotNull(branches, "branches");
            this.branches = Optional.ofNullable(branches);
            return this;
        }

        /**
         * List of all the branches in this database
         */
        public Builder branches(Optional<? extends java.util.List<String>> branches) {
            Utils.checkNotNull(branches, "branches");
            this.branches = branches;
            return this;
        }

        /**
         * A detailed description about all the collections. The description returns collection metadata and the schema.
         */
        public Builder collections(java.util.List<CollectionDescription> collections) {
            Utils.checkNotNull(collections, "collections");
            this.collections = Optional.ofNullable(collections);
            return this;
        }

        /**
         * A detailed description about all the collections. The description returns collection metadata and the schema.
         */
        public Builder collections(Optional<? extends java.util.List<CollectionDescription>> collections) {
            Utils.checkNotNull(collections, "collections");
            this.collections = collections;
            return this;
        }

        public Builder metadata(DatabaseMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends DatabaseMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        /**
         * Sum of all the collections sizes present in this database
         */
        public Builder size(long size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        /**
         * Sum of all the collections sizes present in this database
         */
        public Builder size(Optional<? extends Long> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }
        
        public DescribeDatabaseResponse build() {
            return new DescribeDatabaseResponse(
                branches,
                collections,
                metadata,
                size);
        }
    }
}

