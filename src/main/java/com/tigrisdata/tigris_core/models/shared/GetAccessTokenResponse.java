/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * GetAccessTokenResponse - The response of GetAccessToken which contains access_token and optionally refresh_token.
 */

public class GetAccessTokenResponse {

    /**
     * An Access Token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_token")
    private Optional<? extends String> accessToken;

    /**
     * Access token expiration timeout in seconds.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    private Optional<? extends Integer> expiresIn;

    /**
     * The Refresh Token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    private Optional<? extends String> refreshToken;

    public GetAccessTokenResponse(
            @JsonProperty("access_token") Optional<? extends String> accessToken,
            @JsonProperty("expires_in") Optional<? extends Integer> expiresIn,
            @JsonProperty("refresh_token") Optional<? extends String> refreshToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(expiresIn, "expiresIn");
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.accessToken = accessToken;
        this.expiresIn = expiresIn;
        this.refreshToken = refreshToken;
    }

    /**
     * An Access Token.
     */
    public Optional<? extends String> accessToken() {
        return accessToken;
    }

    /**
     * Access token expiration timeout in seconds.
     */
    public Optional<? extends Integer> expiresIn() {
        return expiresIn;
    }

    /**
     * The Refresh Token.
     */
    public Optional<? extends String> refreshToken() {
        return refreshToken;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An Access Token.
     */
    public GetAccessTokenResponse withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = Optional.ofNullable(accessToken);
        return this;
    }

    /**
     * An Access Token.
     */
    public GetAccessTokenResponse withAccessToken(Optional<? extends String> accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Access token expiration timeout in seconds.
     */
    public GetAccessTokenResponse withExpiresIn(int expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = Optional.ofNullable(expiresIn);
        return this;
    }

    /**
     * Access token expiration timeout in seconds.
     */
    public GetAccessTokenResponse withExpiresIn(Optional<? extends Integer> expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = expiresIn;
        return this;
    }

    /**
     * The Refresh Token.
     */
    public GetAccessTokenResponse withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = Optional.ofNullable(refreshToken);
        return this;
    }

    /**
     * The Refresh Token.
     */
    public GetAccessTokenResponse withRefreshToken(Optional<? extends String> refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetAccessTokenResponse other = (GetAccessTokenResponse) o;
        return 
            java.util.Objects.deepEquals(this.accessToken, other.accessToken) &&
            java.util.Objects.deepEquals(this.expiresIn, other.expiresIn) &&
            java.util.Objects.deepEquals(this.refreshToken, other.refreshToken);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            accessToken,
            expiresIn,
            refreshToken);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetAccessTokenResponse.class,
                "accessToken", accessToken,
                "expiresIn", expiresIn,
                "refreshToken", refreshToken);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> accessToken = Optional.empty();
 
        private Optional<? extends Integer> expiresIn = Optional.empty();
 
        private Optional<? extends String> refreshToken = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An Access Token.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        /**
         * An Access Token.
         */
        public Builder accessToken(Optional<? extends String> accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * Access token expiration timeout in seconds.
         */
        public Builder expiresIn(int expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = Optional.ofNullable(expiresIn);
            return this;
        }

        /**
         * Access token expiration timeout in seconds.
         */
        public Builder expiresIn(Optional<? extends Integer> expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * The Refresh Token.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = Optional.ofNullable(refreshToken);
            return this;
        }

        /**
         * The Refresh Token.
         */
        public Builder refreshToken(Optional<? extends String> refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }
        
        public GetAccessTokenResponse build() {
            return new GetAccessTokenResponse(
                accessToken,
                expiresIn,
                refreshToken);
        }
    }
}

