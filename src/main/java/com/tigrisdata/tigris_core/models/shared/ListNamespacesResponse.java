/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListNamespacesResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("namespaces")
    private Optional<? extends java.util.List<NamespaceInfo>> namespaces;

    public ListNamespacesResponse(
            @JsonProperty("namespaces") Optional<? extends java.util.List<NamespaceInfo>> namespaces) {
        Utils.checkNotNull(namespaces, "namespaces");
        this.namespaces = namespaces;
    }

    public Optional<? extends java.util.List<NamespaceInfo>> namespaces() {
        return namespaces;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ListNamespacesResponse withNamespaces(java.util.List<NamespaceInfo> namespaces) {
        Utils.checkNotNull(namespaces, "namespaces");
        this.namespaces = Optional.ofNullable(namespaces);
        return this;
    }

    public ListNamespacesResponse withNamespaces(Optional<? extends java.util.List<NamespaceInfo>> namespaces) {
        Utils.checkNotNull(namespaces, "namespaces");
        this.namespaces = namespaces;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListNamespacesResponse other = (ListNamespacesResponse) o;
        return 
            java.util.Objects.deepEquals(this.namespaces, other.namespaces);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            namespaces);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListNamespacesResponse.class,
                "namespaces", namespaces);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<NamespaceInfo>> namespaces = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder namespaces(java.util.List<NamespaceInfo> namespaces) {
            Utils.checkNotNull(namespaces, "namespaces");
            this.namespaces = Optional.ofNullable(namespaces);
            return this;
        }

        public Builder namespaces(Optional<? extends java.util.List<NamespaceInfo>> namespaces) {
            Utils.checkNotNull(namespaces, "namespaces");
            this.namespaces = namespaces;
            return this;
        }
        
        public ListNamespacesResponse build() {
            return new ListNamespacesResponse(
                namespaces);
        }
    }
}

