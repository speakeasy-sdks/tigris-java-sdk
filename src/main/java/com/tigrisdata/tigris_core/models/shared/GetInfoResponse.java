/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class GetInfoResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("server_version")
    private Optional<? extends String> serverVersion;

    public GetInfoResponse(
            @JsonProperty("server_version") Optional<? extends String> serverVersion) {
        Utils.checkNotNull(serverVersion, "serverVersion");
        this.serverVersion = serverVersion;
    }

    public Optional<? extends String> serverVersion() {
        return serverVersion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetInfoResponse withServerVersion(String serverVersion) {
        Utils.checkNotNull(serverVersion, "serverVersion");
        this.serverVersion = Optional.ofNullable(serverVersion);
        return this;
    }

    public GetInfoResponse withServerVersion(Optional<? extends String> serverVersion) {
        Utils.checkNotNull(serverVersion, "serverVersion");
        this.serverVersion = serverVersion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetInfoResponse other = (GetInfoResponse) o;
        return 
            java.util.Objects.deepEquals(this.serverVersion, other.serverVersion);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            serverVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetInfoResponse.class,
                "serverVersion", serverVersion);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> serverVersion = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder serverVersion(String serverVersion) {
            Utils.checkNotNull(serverVersion, "serverVersion");
            this.serverVersion = Optional.ofNullable(serverVersion);
            return this;
        }

        public Builder serverVersion(Optional<? extends String> serverVersion) {
            Utils.checkNotNull(serverVersion, "serverVersion");
            this.serverVersion = serverVersion;
            return this;
        }
        
        public GetInfoResponse build() {
            return new GetInfoResponse(
                serverVersion);
        }
    }
}

