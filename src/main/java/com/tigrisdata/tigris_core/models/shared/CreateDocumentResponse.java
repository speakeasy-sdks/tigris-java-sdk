/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class CreateDocumentResponse {

    /**
     * An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends java.util.List<DocStatus>> status;

    public CreateDocumentResponse(
            @JsonProperty("status") Optional<? extends java.util.List<DocStatus>> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
    }

    /**
     * An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
     */
    public Optional<? extends java.util.List<DocStatus>> status() {
        return status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
     */
    public CreateDocumentResponse withStatus(java.util.List<DocStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
     */
    public CreateDocumentResponse withStatus(Optional<? extends java.util.List<DocStatus>> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateDocumentResponse other = (CreateDocumentResponse) o;
        return 
            java.util.Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateDocumentResponse.class,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<DocStatus>> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
         */
        public Builder status(java.util.List<DocStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * An array of statuses of all the documents received in the request. Order is same as it is received in the request. Each item of this array has an “id” and “error” key. Id is set as document id and error will be null in case of success, otherwise error is set with an error code and message.
         */
        public Builder status(Optional<? extends java.util.List<DocStatus>> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public CreateDocumentResponse build() {
            return new CreateDocumentResponse(
                status);
        }
    }
}

