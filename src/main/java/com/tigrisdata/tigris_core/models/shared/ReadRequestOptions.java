/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * ReadRequestOptions - Options that can be used to modify the results, for example "limit" to control the number of documents returned by the server.
 */

public class ReadRequestOptions {

    /**
     * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collation")
    private Optional<? extends Collation> collation;

    /**
     * Limit the number of documents returned by the read operation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit")
    private Optional<? extends Long> limit;

    /**
     * A cursor for use in pagination. The next streams will return documents after this offset.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offset")
    private Optional<? extends String> offset;

    /**
     * Number of documents to skip before starting to return resulting documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip")
    private Optional<? extends Long> skip;

    public ReadRequestOptions(
            @JsonProperty("collation") Optional<? extends Collation> collation,
            @JsonProperty("limit") Optional<? extends Long> limit,
            @JsonProperty("offset") Optional<? extends String> offset,
            @JsonProperty("skip") Optional<? extends Long> skip) {
        Utils.checkNotNull(collation, "collation");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(skip, "skip");
        this.collation = collation;
        this.limit = limit;
        this.offset = offset;
        this.skip = skip;
    }

    /**
     * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
     */
    public Optional<? extends Collation> collation() {
        return collation;
    }

    /**
     * Limit the number of documents returned by the read operation.
     */
    public Optional<? extends Long> limit() {
        return limit;
    }

    /**
     * A cursor for use in pagination. The next streams will return documents after this offset.
     */
    public Optional<? extends String> offset() {
        return offset;
    }

    /**
     * Number of documents to skip before starting to return resulting documents.
     */
    public Optional<? extends Long> skip() {
        return skip;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
     */
    public ReadRequestOptions withCollation(Collation collation) {
        Utils.checkNotNull(collation, "collation");
        this.collation = Optional.ofNullable(collation);
        return this;
    }

    /**
     * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
     */
    public ReadRequestOptions withCollation(Optional<? extends Collation> collation) {
        Utils.checkNotNull(collation, "collation");
        this.collation = collation;
        return this;
    }

    /**
     * Limit the number of documents returned by the read operation.
     */
    public ReadRequestOptions withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Limit the number of documents returned by the read operation.
     */
    public ReadRequestOptions withLimit(Optional<? extends Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * A cursor for use in pagination. The next streams will return documents after this offset.
     */
    public ReadRequestOptions withOffset(String offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    /**
     * A cursor for use in pagination. The next streams will return documents after this offset.
     */
    public ReadRequestOptions withOffset(Optional<? extends String> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    /**
     * Number of documents to skip before starting to return resulting documents.
     */
    public ReadRequestOptions withSkip(long skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = Optional.ofNullable(skip);
        return this;
    }

    /**
     * Number of documents to skip before starting to return resulting documents.
     */
    public ReadRequestOptions withSkip(Optional<? extends Long> skip) {
        Utils.checkNotNull(skip, "skip");
        this.skip = skip;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReadRequestOptions other = (ReadRequestOptions) o;
        return 
            java.util.Objects.deepEquals(this.collation, other.collation) &&
            java.util.Objects.deepEquals(this.limit, other.limit) &&
            java.util.Objects.deepEquals(this.offset, other.offset) &&
            java.util.Objects.deepEquals(this.skip, other.skip);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            collation,
            limit,
            offset,
            skip);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReadRequestOptions.class,
                "collation", collation,
                "limit", limit,
                "offset", offset,
                "skip", skip);
    }
    
    public final static class Builder {
 
        private Optional<? extends Collation> collation = Optional.empty();
 
        private Optional<? extends Long> limit = Optional.empty();
 
        private Optional<? extends String> offset = Optional.empty();
 
        private Optional<? extends Long> skip = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
         */
        public Builder collation(Collation collation) {
            Utils.checkNotNull(collation, "collation");
            this.collation = Optional.ofNullable(collation);
            return this;
        }

        /**
         * A collation allows you to specify string comparison rules. Default is case-sensitive, to override it you can set this option to 'ci' that will apply to all the text fields in the filters.
         */
        public Builder collation(Optional<? extends Collation> collation) {
            Utils.checkNotNull(collation, "collation");
            this.collation = collation;
            return this;
        }

        /**
         * Limit the number of documents returned by the read operation.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Limit the number of documents returned by the read operation.
         */
        public Builder limit(Optional<? extends Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * A cursor for use in pagination. The next streams will return documents after this offset.
         */
        public Builder offset(String offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        /**
         * A cursor for use in pagination. The next streams will return documents after this offset.
         */
        public Builder offset(Optional<? extends String> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }

        /**
         * Number of documents to skip before starting to return resulting documents.
         */
        public Builder skip(long skip) {
            Utils.checkNotNull(skip, "skip");
            this.skip = Optional.ofNullable(skip);
            return this;
        }

        /**
         * Number of documents to skip before starting to return resulting documents.
         */
        public Builder skip(Optional<? extends Long> skip) {
            Utils.checkNotNull(skip, "skip");
            this.skip = skip;
            return this;
        }
        
        public ReadRequestOptions build() {
            return new ReadRequestOptions(
                collation,
                limit,
                offset,
                skip);
        }
    }
}

