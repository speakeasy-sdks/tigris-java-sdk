/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * QuotaUsageResponse - Contains current quota usage
 */

public class QuotaUsageResponse {

    /**
     * Number of read units used per second
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReadUnits")
    private Optional<? extends Long> readUnits;

    /**
     * Number of read units throttled per second. Units which was rejected with "resource exhausted error".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ReadUnitsThrottled")
    private Optional<? extends Long> readUnitsThrottled;

    /**
     * Number of bytes stored
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StorageSize")
    private Optional<? extends Long> storageSize;

    /**
     * Number of bytes throttled. Number of bytes which were attempted to write in excess of quota and were rejected.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("StorageSizeThrottled")
    private Optional<? extends Long> storageSizeThrottled;

    /**
     * Number of write units used per second
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WriteUnits")
    private Optional<? extends Long> writeUnits;

    /**
     * Number of write units throttled per second. Units which was rejected with "resource exhausted error".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("WriteUnitsThrottled")
    private Optional<? extends Long> writeUnitsThrottled;

    public QuotaUsageResponse(
            @JsonProperty("ReadUnits") Optional<? extends Long> readUnits,
            @JsonProperty("ReadUnitsThrottled") Optional<? extends Long> readUnitsThrottled,
            @JsonProperty("StorageSize") Optional<? extends Long> storageSize,
            @JsonProperty("StorageSizeThrottled") Optional<? extends Long> storageSizeThrottled,
            @JsonProperty("WriteUnits") Optional<? extends Long> writeUnits,
            @JsonProperty("WriteUnitsThrottled") Optional<? extends Long> writeUnitsThrottled) {
        Utils.checkNotNull(readUnits, "readUnits");
        Utils.checkNotNull(readUnitsThrottled, "readUnitsThrottled");
        Utils.checkNotNull(storageSize, "storageSize");
        Utils.checkNotNull(storageSizeThrottled, "storageSizeThrottled");
        Utils.checkNotNull(writeUnits, "writeUnits");
        Utils.checkNotNull(writeUnitsThrottled, "writeUnitsThrottled");
        this.readUnits = readUnits;
        this.readUnitsThrottled = readUnitsThrottled;
        this.storageSize = storageSize;
        this.storageSizeThrottled = storageSizeThrottled;
        this.writeUnits = writeUnits;
        this.writeUnitsThrottled = writeUnitsThrottled;
    }

    /**
     * Number of read units used per second
     */
    public Optional<? extends Long> readUnits() {
        return readUnits;
    }

    /**
     * Number of read units throttled per second. Units which was rejected with "resource exhausted error".
     */
    public Optional<? extends Long> readUnitsThrottled() {
        return readUnitsThrottled;
    }

    /**
     * Number of bytes stored
     */
    public Optional<? extends Long> storageSize() {
        return storageSize;
    }

    /**
     * Number of bytes throttled. Number of bytes which were attempted to write in excess of quota and were rejected.
     */
    public Optional<? extends Long> storageSizeThrottled() {
        return storageSizeThrottled;
    }

    /**
     * Number of write units used per second
     */
    public Optional<? extends Long> writeUnits() {
        return writeUnits;
    }

    /**
     * Number of write units throttled per second. Units which was rejected with "resource exhausted error".
     */
    public Optional<? extends Long> writeUnitsThrottled() {
        return writeUnitsThrottled;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Number of read units used per second
     */
    public QuotaUsageResponse withReadUnits(long readUnits) {
        Utils.checkNotNull(readUnits, "readUnits");
        this.readUnits = Optional.ofNullable(readUnits);
        return this;
    }

    /**
     * Number of read units used per second
     */
    public QuotaUsageResponse withReadUnits(Optional<? extends Long> readUnits) {
        Utils.checkNotNull(readUnits, "readUnits");
        this.readUnits = readUnits;
        return this;
    }

    /**
     * Number of read units throttled per second. Units which was rejected with "resource exhausted error".
     */
    public QuotaUsageResponse withReadUnitsThrottled(long readUnitsThrottled) {
        Utils.checkNotNull(readUnitsThrottled, "readUnitsThrottled");
        this.readUnitsThrottled = Optional.ofNullable(readUnitsThrottled);
        return this;
    }

    /**
     * Number of read units throttled per second. Units which was rejected with "resource exhausted error".
     */
    public QuotaUsageResponse withReadUnitsThrottled(Optional<? extends Long> readUnitsThrottled) {
        Utils.checkNotNull(readUnitsThrottled, "readUnitsThrottled");
        this.readUnitsThrottled = readUnitsThrottled;
        return this;
    }

    /**
     * Number of bytes stored
     */
    public QuotaUsageResponse withStorageSize(long storageSize) {
        Utils.checkNotNull(storageSize, "storageSize");
        this.storageSize = Optional.ofNullable(storageSize);
        return this;
    }

    /**
     * Number of bytes stored
     */
    public QuotaUsageResponse withStorageSize(Optional<? extends Long> storageSize) {
        Utils.checkNotNull(storageSize, "storageSize");
        this.storageSize = storageSize;
        return this;
    }

    /**
     * Number of bytes throttled. Number of bytes which were attempted to write in excess of quota and were rejected.
     */
    public QuotaUsageResponse withStorageSizeThrottled(long storageSizeThrottled) {
        Utils.checkNotNull(storageSizeThrottled, "storageSizeThrottled");
        this.storageSizeThrottled = Optional.ofNullable(storageSizeThrottled);
        return this;
    }

    /**
     * Number of bytes throttled. Number of bytes which were attempted to write in excess of quota and were rejected.
     */
    public QuotaUsageResponse withStorageSizeThrottled(Optional<? extends Long> storageSizeThrottled) {
        Utils.checkNotNull(storageSizeThrottled, "storageSizeThrottled");
        this.storageSizeThrottled = storageSizeThrottled;
        return this;
    }

    /**
     * Number of write units used per second
     */
    public QuotaUsageResponse withWriteUnits(long writeUnits) {
        Utils.checkNotNull(writeUnits, "writeUnits");
        this.writeUnits = Optional.ofNullable(writeUnits);
        return this;
    }

    /**
     * Number of write units used per second
     */
    public QuotaUsageResponse withWriteUnits(Optional<? extends Long> writeUnits) {
        Utils.checkNotNull(writeUnits, "writeUnits");
        this.writeUnits = writeUnits;
        return this;
    }

    /**
     * Number of write units throttled per second. Units which was rejected with "resource exhausted error".
     */
    public QuotaUsageResponse withWriteUnitsThrottled(long writeUnitsThrottled) {
        Utils.checkNotNull(writeUnitsThrottled, "writeUnitsThrottled");
        this.writeUnitsThrottled = Optional.ofNullable(writeUnitsThrottled);
        return this;
    }

    /**
     * Number of write units throttled per second. Units which was rejected with "resource exhausted error".
     */
    public QuotaUsageResponse withWriteUnitsThrottled(Optional<? extends Long> writeUnitsThrottled) {
        Utils.checkNotNull(writeUnitsThrottled, "writeUnitsThrottled");
        this.writeUnitsThrottled = writeUnitsThrottled;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuotaUsageResponse other = (QuotaUsageResponse) o;
        return 
            java.util.Objects.deepEquals(this.readUnits, other.readUnits) &&
            java.util.Objects.deepEquals(this.readUnitsThrottled, other.readUnitsThrottled) &&
            java.util.Objects.deepEquals(this.storageSize, other.storageSize) &&
            java.util.Objects.deepEquals(this.storageSizeThrottled, other.storageSizeThrottled) &&
            java.util.Objects.deepEquals(this.writeUnits, other.writeUnits) &&
            java.util.Objects.deepEquals(this.writeUnitsThrottled, other.writeUnitsThrottled);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            readUnits,
            readUnitsThrottled,
            storageSize,
            storageSizeThrottled,
            writeUnits,
            writeUnitsThrottled);
    }
    
    @Override
    public String toString() {
        return Utils.toString(QuotaUsageResponse.class,
                "readUnits", readUnits,
                "readUnitsThrottled", readUnitsThrottled,
                "storageSize", storageSize,
                "storageSizeThrottled", storageSizeThrottled,
                "writeUnits", writeUnits,
                "writeUnitsThrottled", writeUnitsThrottled);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> readUnits = Optional.empty();
 
        private Optional<? extends Long> readUnitsThrottled = Optional.empty();
 
        private Optional<? extends Long> storageSize = Optional.empty();
 
        private Optional<? extends Long> storageSizeThrottled = Optional.empty();
 
        private Optional<? extends Long> writeUnits = Optional.empty();
 
        private Optional<? extends Long> writeUnitsThrottled = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Number of read units used per second
         */
        public Builder readUnits(long readUnits) {
            Utils.checkNotNull(readUnits, "readUnits");
            this.readUnits = Optional.ofNullable(readUnits);
            return this;
        }

        /**
         * Number of read units used per second
         */
        public Builder readUnits(Optional<? extends Long> readUnits) {
            Utils.checkNotNull(readUnits, "readUnits");
            this.readUnits = readUnits;
            return this;
        }

        /**
         * Number of read units throttled per second. Units which was rejected with "resource exhausted error".
         */
        public Builder readUnitsThrottled(long readUnitsThrottled) {
            Utils.checkNotNull(readUnitsThrottled, "readUnitsThrottled");
            this.readUnitsThrottled = Optional.ofNullable(readUnitsThrottled);
            return this;
        }

        /**
         * Number of read units throttled per second. Units which was rejected with "resource exhausted error".
         */
        public Builder readUnitsThrottled(Optional<? extends Long> readUnitsThrottled) {
            Utils.checkNotNull(readUnitsThrottled, "readUnitsThrottled");
            this.readUnitsThrottled = readUnitsThrottled;
            return this;
        }

        /**
         * Number of bytes stored
         */
        public Builder storageSize(long storageSize) {
            Utils.checkNotNull(storageSize, "storageSize");
            this.storageSize = Optional.ofNullable(storageSize);
            return this;
        }

        /**
         * Number of bytes stored
         */
        public Builder storageSize(Optional<? extends Long> storageSize) {
            Utils.checkNotNull(storageSize, "storageSize");
            this.storageSize = storageSize;
            return this;
        }

        /**
         * Number of bytes throttled. Number of bytes which were attempted to write in excess of quota and were rejected.
         */
        public Builder storageSizeThrottled(long storageSizeThrottled) {
            Utils.checkNotNull(storageSizeThrottled, "storageSizeThrottled");
            this.storageSizeThrottled = Optional.ofNullable(storageSizeThrottled);
            return this;
        }

        /**
         * Number of bytes throttled. Number of bytes which were attempted to write in excess of quota and were rejected.
         */
        public Builder storageSizeThrottled(Optional<? extends Long> storageSizeThrottled) {
            Utils.checkNotNull(storageSizeThrottled, "storageSizeThrottled");
            this.storageSizeThrottled = storageSizeThrottled;
            return this;
        }

        /**
         * Number of write units used per second
         */
        public Builder writeUnits(long writeUnits) {
            Utils.checkNotNull(writeUnits, "writeUnits");
            this.writeUnits = Optional.ofNullable(writeUnits);
            return this;
        }

        /**
         * Number of write units used per second
         */
        public Builder writeUnits(Optional<? extends Long> writeUnits) {
            Utils.checkNotNull(writeUnits, "writeUnits");
            this.writeUnits = writeUnits;
            return this;
        }

        /**
         * Number of write units throttled per second. Units which was rejected with "resource exhausted error".
         */
        public Builder writeUnitsThrottled(long writeUnitsThrottled) {
            Utils.checkNotNull(writeUnitsThrottled, "writeUnitsThrottled");
            this.writeUnitsThrottled = Optional.ofNullable(writeUnitsThrottled);
            return this;
        }

        /**
         * Number of write units throttled per second. Units which was rejected with "resource exhausted error".
         */
        public Builder writeUnitsThrottled(Optional<? extends Long> writeUnitsThrottled) {
            Utils.checkNotNull(writeUnitsThrottled, "writeUnitsThrottled");
            this.writeUnitsThrottled = writeUnitsThrottled;
            return this;
        }
        
        public QuotaUsageResponse build() {
            return new QuotaUsageResponse(
                readUnits,
                readUnitsThrottled,
                storageSize,
                storageSizeThrottled,
                writeUnits,
                writeUnitsThrottled);
        }
    }
}

