/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

/**
 * QueryTimeSeriesMetricsResponse - QueryTimeSeriesMetric responds with this type.
 */

public class QueryTimeSeriesMetricsResponse {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private Optional<? extends Long> from;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("query")
    private Optional<? extends String> query;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("series")
    private Optional<? extends java.util.List<MetricSeries>> series;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to")
    private Optional<? extends Long> to;

    public QueryTimeSeriesMetricsResponse(
            @JsonProperty("from") Optional<? extends Long> from,
            @JsonProperty("query") Optional<? extends String> query,
            @JsonProperty("series") Optional<? extends java.util.List<MetricSeries>> series,
            @JsonProperty("to") Optional<? extends Long> to) {
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(series, "series");
        Utils.checkNotNull(to, "to");
        this.from = from;
        this.query = query;
        this.series = series;
        this.to = to;
    }

    public Optional<? extends Long> from() {
        return from;
    }

    public Optional<? extends String> query() {
        return query;
    }

    public Optional<? extends java.util.List<MetricSeries>> series() {
        return series;
    }

    public Optional<? extends Long> to() {
        return to;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public QueryTimeSeriesMetricsResponse withFrom(long from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    public QueryTimeSeriesMetricsResponse withFrom(Optional<? extends Long> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public QueryTimeSeriesMetricsResponse withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    public QueryTimeSeriesMetricsResponse withQuery(Optional<? extends String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    public QueryTimeSeriesMetricsResponse withSeries(java.util.List<MetricSeries> series) {
        Utils.checkNotNull(series, "series");
        this.series = Optional.ofNullable(series);
        return this;
    }

    public QueryTimeSeriesMetricsResponse withSeries(Optional<? extends java.util.List<MetricSeries>> series) {
        Utils.checkNotNull(series, "series");
        this.series = series;
        return this;
    }

    public QueryTimeSeriesMetricsResponse withTo(long to) {
        Utils.checkNotNull(to, "to");
        this.to = Optional.ofNullable(to);
        return this;
    }

    public QueryTimeSeriesMetricsResponse withTo(Optional<? extends Long> to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QueryTimeSeriesMetricsResponse other = (QueryTimeSeriesMetricsResponse) o;
        return 
            java.util.Objects.deepEquals(this.from, other.from) &&
            java.util.Objects.deepEquals(this.query, other.query) &&
            java.util.Objects.deepEquals(this.series, other.series) &&
            java.util.Objects.deepEquals(this.to, other.to);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            from,
            query,
            series,
            to);
    }
    
    @Override
    public String toString() {
        return Utils.toString(QueryTimeSeriesMetricsResponse.class,
                "from", from,
                "query", query,
                "series", series,
                "to", to);
    }
    
    public final static class Builder {
 
        private Optional<? extends Long> from = Optional.empty();
 
        private Optional<? extends String> query = Optional.empty();
 
        private Optional<? extends java.util.List<MetricSeries>> series = Optional.empty();
 
        private Optional<? extends Long> to = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder from(long from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        public Builder from(Optional<? extends Long> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        public Builder query(Optional<? extends String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        public Builder series(java.util.List<MetricSeries> series) {
            Utils.checkNotNull(series, "series");
            this.series = Optional.ofNullable(series);
            return this;
        }

        public Builder series(Optional<? extends java.util.List<MetricSeries>> series) {
            Utils.checkNotNull(series, "series");
            this.series = series;
            return this;
        }

        public Builder to(long to) {
            Utils.checkNotNull(to, "to");
            this.to = Optional.ofNullable(to);
            return this;
        }

        public Builder to(Optional<? extends Long> to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }
        
        public QueryTimeSeriesMetricsResponse build() {
            return new QueryTimeSeriesMetricsResponse(
                from,
                query,
                series,
                to);
        }
    }
}

