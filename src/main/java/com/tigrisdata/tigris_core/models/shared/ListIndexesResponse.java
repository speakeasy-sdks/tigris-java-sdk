/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class ListIndexesResponse {

    /**
     * List of indexes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("indexes")
    private Optional<? extends java.util.List<IndexInfo>> indexes;

    public ListIndexesResponse(
            @JsonProperty("indexes") Optional<? extends java.util.List<IndexInfo>> indexes) {
        Utils.checkNotNull(indexes, "indexes");
        this.indexes = indexes;
    }

    /**
     * List of indexes.
     */
    public Optional<? extends java.util.List<IndexInfo>> indexes() {
        return indexes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of indexes.
     */
    public ListIndexesResponse withIndexes(java.util.List<IndexInfo> indexes) {
        Utils.checkNotNull(indexes, "indexes");
        this.indexes = Optional.ofNullable(indexes);
        return this;
    }

    /**
     * List of indexes.
     */
    public ListIndexesResponse withIndexes(Optional<? extends java.util.List<IndexInfo>> indexes) {
        Utils.checkNotNull(indexes, "indexes");
        this.indexes = indexes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListIndexesResponse other = (ListIndexesResponse) o;
        return 
            java.util.Objects.deepEquals(this.indexes, other.indexes);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            indexes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListIndexesResponse.class,
                "indexes", indexes);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<IndexInfo>> indexes = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of indexes.
         */
        public Builder indexes(java.util.List<IndexInfo> indexes) {
            Utils.checkNotNull(indexes, "indexes");
            this.indexes = Optional.ofNullable(indexes);
            return this;
        }

        /**
         * List of indexes.
         */
        public Builder indexes(Optional<? extends java.util.List<IndexInfo>> indexes) {
            Utils.checkNotNull(indexes, "indexes");
            this.indexes = indexes;
            return this;
        }
        
        public ListIndexesResponse build() {
            return new ListIndexesResponse(
                indexes);
        }
    }
}

