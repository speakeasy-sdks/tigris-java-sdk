/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.SpeakeasyMetadata;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class RealtimeReadMessagesRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=channel")
    private String channel;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end")
    private Optional<? extends String> end;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=event")
    private Optional<? extends String> event;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<? extends Long> limit;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=project")
    private String project;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=session_id")
    private Optional<? extends String> sessionId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=socket_id")
    private Optional<? extends String> socketId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start")
    private Optional<? extends String> start;

    public RealtimeReadMessagesRequest(
            String channel,
            Optional<? extends String> end,
            Optional<? extends String> event,
            Optional<? extends Long> limit,
            String project,
            Optional<? extends String> sessionId,
            Optional<? extends String> socketId,
            Optional<? extends String> start) {
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(end, "end");
        Utils.checkNotNull(event, "event");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(project, "project");
        Utils.checkNotNull(sessionId, "sessionId");
        Utils.checkNotNull(socketId, "socketId");
        Utils.checkNotNull(start, "start");
        this.channel = channel;
        this.end = end;
        this.event = event;
        this.limit = limit;
        this.project = project;
        this.sessionId = sessionId;
        this.socketId = socketId;
        this.start = start;
    }

    public String channel() {
        return channel;
    }

    public Optional<? extends String> end() {
        return end;
    }

    public Optional<? extends String> event() {
        return event;
    }

    public Optional<? extends Long> limit() {
        return limit;
    }

    public String project() {
        return project;
    }

    public Optional<? extends String> sessionId() {
        return sessionId;
    }

    public Optional<? extends String> socketId() {
        return socketId;
    }

    public Optional<? extends String> start() {
        return start;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RealtimeReadMessagesRequest withChannel(String channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    public RealtimeReadMessagesRequest withEnd(String end) {
        Utils.checkNotNull(end, "end");
        this.end = Optional.ofNullable(end);
        return this;
    }

    public RealtimeReadMessagesRequest withEnd(Optional<? extends String> end) {
        Utils.checkNotNull(end, "end");
        this.end = end;
        return this;
    }

    public RealtimeReadMessagesRequest withEvent(String event) {
        Utils.checkNotNull(event, "event");
        this.event = Optional.ofNullable(event);
        return this;
    }

    public RealtimeReadMessagesRequest withEvent(Optional<? extends String> event) {
        Utils.checkNotNull(event, "event");
        this.event = event;
        return this;
    }

    public RealtimeReadMessagesRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    public RealtimeReadMessagesRequest withLimit(Optional<? extends Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public RealtimeReadMessagesRequest withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }

    public RealtimeReadMessagesRequest withSessionId(String sessionId) {
        Utils.checkNotNull(sessionId, "sessionId");
        this.sessionId = Optional.ofNullable(sessionId);
        return this;
    }

    public RealtimeReadMessagesRequest withSessionId(Optional<? extends String> sessionId) {
        Utils.checkNotNull(sessionId, "sessionId");
        this.sessionId = sessionId;
        return this;
    }

    public RealtimeReadMessagesRequest withSocketId(String socketId) {
        Utils.checkNotNull(socketId, "socketId");
        this.socketId = Optional.ofNullable(socketId);
        return this;
    }

    public RealtimeReadMessagesRequest withSocketId(Optional<? extends String> socketId) {
        Utils.checkNotNull(socketId, "socketId");
        this.socketId = socketId;
        return this;
    }

    public RealtimeReadMessagesRequest withStart(String start) {
        Utils.checkNotNull(start, "start");
        this.start = Optional.ofNullable(start);
        return this;
    }

    public RealtimeReadMessagesRequest withStart(Optional<? extends String> start) {
        Utils.checkNotNull(start, "start");
        this.start = start;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RealtimeReadMessagesRequest other = (RealtimeReadMessagesRequest) o;
        return 
            java.util.Objects.deepEquals(this.channel, other.channel) &&
            java.util.Objects.deepEquals(this.end, other.end) &&
            java.util.Objects.deepEquals(this.event, other.event) &&
            java.util.Objects.deepEquals(this.limit, other.limit) &&
            java.util.Objects.deepEquals(this.project, other.project) &&
            java.util.Objects.deepEquals(this.sessionId, other.sessionId) &&
            java.util.Objects.deepEquals(this.socketId, other.socketId) &&
            java.util.Objects.deepEquals(this.start, other.start);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            channel,
            end,
            event,
            limit,
            project,
            sessionId,
            socketId,
            start);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RealtimeReadMessagesRequest.class,
                "channel", channel,
                "end", end,
                "event", event,
                "limit", limit,
                "project", project,
                "sessionId", sessionId,
                "socketId", socketId,
                "start", start);
    }
    
    public final static class Builder {
 
        private String channel;
 
        private Optional<? extends String> end = Optional.empty();
 
        private Optional<? extends String> event = Optional.empty();
 
        private Optional<? extends Long> limit = Optional.empty();
 
        private String project;
 
        private Optional<? extends String> sessionId = Optional.empty();
 
        private Optional<? extends String> socketId = Optional.empty();
 
        private Optional<? extends String> start = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder channel(String channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        public Builder end(String end) {
            Utils.checkNotNull(end, "end");
            this.end = Optional.ofNullable(end);
            return this;
        }

        public Builder end(Optional<? extends String> end) {
            Utils.checkNotNull(end, "end");
            this.end = end;
            return this;
        }

        public Builder event(String event) {
            Utils.checkNotNull(event, "event");
            this.event = Optional.ofNullable(event);
            return this;
        }

        public Builder event(Optional<? extends String> event) {
            Utils.checkNotNull(event, "event");
            this.event = event;
            return this;
        }

        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<? extends Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }

        public Builder sessionId(String sessionId) {
            Utils.checkNotNull(sessionId, "sessionId");
            this.sessionId = Optional.ofNullable(sessionId);
            return this;
        }

        public Builder sessionId(Optional<? extends String> sessionId) {
            Utils.checkNotNull(sessionId, "sessionId");
            this.sessionId = sessionId;
            return this;
        }

        public Builder socketId(String socketId) {
            Utils.checkNotNull(socketId, "socketId");
            this.socketId = Optional.ofNullable(socketId);
            return this;
        }

        public Builder socketId(Optional<? extends String> socketId) {
            Utils.checkNotNull(socketId, "socketId");
            this.socketId = socketId;
            return this;
        }

        public Builder start(String start) {
            Utils.checkNotNull(start, "start");
            this.start = Optional.ofNullable(start);
            return this;
        }

        public Builder start(Optional<? extends String> start) {
            Utils.checkNotNull(start, "start");
            this.start = start;
            return this;
        }
        
        public RealtimeReadMessagesRequest build() {
            return new RealtimeReadMessagesRequest(
                channel,
                end,
                event,
                limit,
                project,
                sessionId,
                socketId,
                start);
        }
    }
}

