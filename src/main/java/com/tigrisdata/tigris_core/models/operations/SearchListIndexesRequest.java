/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.SpeakeasyMetadata;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class SearchListIndexesRequest {

    /**
     * Applicable only in case index is backed by Tigris collection. This is the database branch for the above collection. For primary database it can be omitted or "main" can be passed.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filter.branch")
    private Optional<? extends String> filterBranch;

    /**
     * Applicable only in case index is backed by Tigris collection.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filter.collection")
    private Optional<? extends String> filterCollection;

    /**
     * An index can be either managed by user explicitly then the type is set as "user" or the index is backed by Tigris collection. In case it is backed by Tigris collection the type is "tigris".
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=filter.type")
    private Optional<? extends String> filterType;

    /**
     * Tigris project name.
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=project")
    private String project;

    public SearchListIndexesRequest(
            Optional<? extends String> filterBranch,
            Optional<? extends String> filterCollection,
            Optional<? extends String> filterType,
            String project) {
        Utils.checkNotNull(filterBranch, "filterBranch");
        Utils.checkNotNull(filterCollection, "filterCollection");
        Utils.checkNotNull(filterType, "filterType");
        Utils.checkNotNull(project, "project");
        this.filterBranch = filterBranch;
        this.filterCollection = filterCollection;
        this.filterType = filterType;
        this.project = project;
    }

    /**
     * Applicable only in case index is backed by Tigris collection. This is the database branch for the above collection. For primary database it can be omitted or "main" can be passed.
     */
    public Optional<? extends String> filterBranch() {
        return filterBranch;
    }

    /**
     * Applicable only in case index is backed by Tigris collection.
     */
    public Optional<? extends String> filterCollection() {
        return filterCollection;
    }

    /**
     * An index can be either managed by user explicitly then the type is set as "user" or the index is backed by Tigris collection. In case it is backed by Tigris collection the type is "tigris".
     */
    public Optional<? extends String> filterType() {
        return filterType;
    }

    /**
     * Tigris project name.
     */
    public String project() {
        return project;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Applicable only in case index is backed by Tigris collection. This is the database branch for the above collection. For primary database it can be omitted or "main" can be passed.
     */
    public SearchListIndexesRequest withFilterBranch(String filterBranch) {
        Utils.checkNotNull(filterBranch, "filterBranch");
        this.filterBranch = Optional.ofNullable(filterBranch);
        return this;
    }

    /**
     * Applicable only in case index is backed by Tigris collection. This is the database branch for the above collection. For primary database it can be omitted or "main" can be passed.
     */
    public SearchListIndexesRequest withFilterBranch(Optional<? extends String> filterBranch) {
        Utils.checkNotNull(filterBranch, "filterBranch");
        this.filterBranch = filterBranch;
        return this;
    }

    /**
     * Applicable only in case index is backed by Tigris collection.
     */
    public SearchListIndexesRequest withFilterCollection(String filterCollection) {
        Utils.checkNotNull(filterCollection, "filterCollection");
        this.filterCollection = Optional.ofNullable(filterCollection);
        return this;
    }

    /**
     * Applicable only in case index is backed by Tigris collection.
     */
    public SearchListIndexesRequest withFilterCollection(Optional<? extends String> filterCollection) {
        Utils.checkNotNull(filterCollection, "filterCollection");
        this.filterCollection = filterCollection;
        return this;
    }

    /**
     * An index can be either managed by user explicitly then the type is set as "user" or the index is backed by Tigris collection. In case it is backed by Tigris collection the type is "tigris".
     */
    public SearchListIndexesRequest withFilterType(String filterType) {
        Utils.checkNotNull(filterType, "filterType");
        this.filterType = Optional.ofNullable(filterType);
        return this;
    }

    /**
     * An index can be either managed by user explicitly then the type is set as "user" or the index is backed by Tigris collection. In case it is backed by Tigris collection the type is "tigris".
     */
    public SearchListIndexesRequest withFilterType(Optional<? extends String> filterType) {
        Utils.checkNotNull(filterType, "filterType");
        this.filterType = filterType;
        return this;
    }

    /**
     * Tigris project name.
     */
    public SearchListIndexesRequest withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SearchListIndexesRequest other = (SearchListIndexesRequest) o;
        return 
            java.util.Objects.deepEquals(this.filterBranch, other.filterBranch) &&
            java.util.Objects.deepEquals(this.filterCollection, other.filterCollection) &&
            java.util.Objects.deepEquals(this.filterType, other.filterType) &&
            java.util.Objects.deepEquals(this.project, other.project);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            filterBranch,
            filterCollection,
            filterType,
            project);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SearchListIndexesRequest.class,
                "filterBranch", filterBranch,
                "filterCollection", filterCollection,
                "filterType", filterType,
                "project", project);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> filterBranch = Optional.empty();
 
        private Optional<? extends String> filterCollection = Optional.empty();
 
        private Optional<? extends String> filterType = Optional.empty();
 
        private String project;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Applicable only in case index is backed by Tigris collection. This is the database branch for the above collection. For primary database it can be omitted or "main" can be passed.
         */
        public Builder filterBranch(String filterBranch) {
            Utils.checkNotNull(filterBranch, "filterBranch");
            this.filterBranch = Optional.ofNullable(filterBranch);
            return this;
        }

        /**
         * Applicable only in case index is backed by Tigris collection. This is the database branch for the above collection. For primary database it can be omitted or "main" can be passed.
         */
        public Builder filterBranch(Optional<? extends String> filterBranch) {
            Utils.checkNotNull(filterBranch, "filterBranch");
            this.filterBranch = filterBranch;
            return this;
        }

        /**
         * Applicable only in case index is backed by Tigris collection.
         */
        public Builder filterCollection(String filterCollection) {
            Utils.checkNotNull(filterCollection, "filterCollection");
            this.filterCollection = Optional.ofNullable(filterCollection);
            return this;
        }

        /**
         * Applicable only in case index is backed by Tigris collection.
         */
        public Builder filterCollection(Optional<? extends String> filterCollection) {
            Utils.checkNotNull(filterCollection, "filterCollection");
            this.filterCollection = filterCollection;
            return this;
        }

        /**
         * An index can be either managed by user explicitly then the type is set as "user" or the index is backed by Tigris collection. In case it is backed by Tigris collection the type is "tigris".
         */
        public Builder filterType(String filterType) {
            Utils.checkNotNull(filterType, "filterType");
            this.filterType = Optional.ofNullable(filterType);
            return this;
        }

        /**
         * An index can be either managed by user explicitly then the type is set as "user" or the index is backed by Tigris collection. In case it is backed by Tigris collection the type is "tigris".
         */
        public Builder filterType(Optional<? extends String> filterType) {
            Utils.checkNotNull(filterType, "filterType");
            this.filterType = filterType;
            return this;
        }

        /**
         * Tigris project name.
         */
        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }
        
        public SearchListIndexesRequest build() {
            return new SearchListIndexesRequest(
                filterBranch,
                filterCollection,
                filterType,
                project);
        }
    }
}

