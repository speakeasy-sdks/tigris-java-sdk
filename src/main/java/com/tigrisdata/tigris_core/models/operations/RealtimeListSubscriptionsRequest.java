/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.operations;

import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.core.type.TypeReference;
import com.tigrisdata.tigris_core.utils.SpeakeasyMetadata;
import com.tigrisdata.tigris_core.utils.Utils;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;


public class RealtimeListSubscriptionsRequest {

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=channel")
    private String channel;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<? extends Integer> page;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page_size")
    private Optional<? extends Integer> pageSize;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=project")
    private String project;

    public RealtimeListSubscriptionsRequest(
            String channel,
            Optional<? extends Integer> page,
            Optional<? extends Integer> pageSize,
            String project) {
        Utils.checkNotNull(channel, "channel");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(pageSize, "pageSize");
        Utils.checkNotNull(project, "project");
        this.channel = channel;
        this.page = page;
        this.pageSize = pageSize;
        this.project = project;
    }

    public String channel() {
        return channel;
    }

    public Optional<? extends Integer> page() {
        return page;
    }

    public Optional<? extends Integer> pageSize() {
        return pageSize;
    }

    public String project() {
        return project;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RealtimeListSubscriptionsRequest withChannel(String channel) {
        Utils.checkNotNull(channel, "channel");
        this.channel = channel;
        return this;
    }

    public RealtimeListSubscriptionsRequest withPage(int page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    public RealtimeListSubscriptionsRequest withPage(Optional<? extends Integer> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    public RealtimeListSubscriptionsRequest withPageSize(int pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = Optional.ofNullable(pageSize);
        return this;
    }

    public RealtimeListSubscriptionsRequest withPageSize(Optional<? extends Integer> pageSize) {
        Utils.checkNotNull(pageSize, "pageSize");
        this.pageSize = pageSize;
        return this;
    }

    public RealtimeListSubscriptionsRequest withProject(String project) {
        Utils.checkNotNull(project, "project");
        this.project = project;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RealtimeListSubscriptionsRequest other = (RealtimeListSubscriptionsRequest) o;
        return 
            java.util.Objects.deepEquals(this.channel, other.channel) &&
            java.util.Objects.deepEquals(this.page, other.page) &&
            java.util.Objects.deepEquals(this.pageSize, other.pageSize) &&
            java.util.Objects.deepEquals(this.project, other.project);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            channel,
            page,
            pageSize,
            project);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RealtimeListSubscriptionsRequest.class,
                "channel", channel,
                "page", page,
                "pageSize", pageSize,
                "project", project);
    }
    
    public final static class Builder {
 
        private String channel;
 
        private Optional<? extends Integer> page = Optional.empty();
 
        private Optional<? extends Integer> pageSize = Optional.empty();
 
        private String project;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder channel(String channel) {
            Utils.checkNotNull(channel, "channel");
            this.channel = channel;
            return this;
        }

        public Builder page(int page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        public Builder page(Optional<? extends Integer> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        public Builder pageSize(int pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = Optional.ofNullable(pageSize);
            return this;
        }

        public Builder pageSize(Optional<? extends Integer> pageSize) {
            Utils.checkNotNull(pageSize, "pageSize");
            this.pageSize = pageSize;
            return this;
        }

        public Builder project(String project) {
            Utils.checkNotNull(project, "project");
            this.project = project;
            return this;
        }
        
        public RealtimeListSubscriptionsRequest build() {
            return new RealtimeListSubscriptionsRequest(
                channel,
                page,
                pageSize,
                project);
        }
    }
}

