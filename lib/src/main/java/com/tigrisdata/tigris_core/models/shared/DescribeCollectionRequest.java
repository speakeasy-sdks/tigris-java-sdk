/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.tigrisdata.tigris_core.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class DescribeCollectionRequest {
    /**
     * Optionally specify a database branch name to perform operation on
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch")
    public String branch;

    public DescribeCollectionRequest withBranch(String branch) {
        this.branch = branch;
        return this;
    }
    
    /**
     * Name of the collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection")
    public String collection;

    public DescribeCollectionRequest withCollection(String collection) {
        this.collection = collection;
        return this;
    }
    
    /**
     * Collection requests modifying options.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    public java.util.Map<String, Object> options;

    public DescribeCollectionRequest withOptions(java.util.Map<String, Object> options) {
        this.options = options;
        return this;
    }
    
    /**
     * Project name whose db is under target to get description of its collection.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project")
    public String project;

    public DescribeCollectionRequest withProject(String project) {
        this.project = project;
        return this;
    }
    
    /**
     * Return schema in the requested format. Format can be JSON, Go, TypeScript, Java. Default is JSON.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schema_format")
    public String schemaFormat;

    public DescribeCollectionRequest withSchemaFormat(String schemaFormat) {
        this.schemaFormat = schemaFormat;
        return this;
    }
    
    public DescribeCollectionRequest(){}
}
